// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    kubernetes "github.com/jdcloud-api/jdcloud-sdk-go/services/kubernetes/apis"
    "encoding/json"
    "errors"
)

type KubernetesClient struct {
    core.JDCloudClient
}

func NewKubernetesClient(credential *core.Credential) *KubernetesClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("kubernetes.jdcloud-api.com")

    return &KubernetesClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "kubernetes",
            Revision:    "1.2.2",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *KubernetesClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *KubernetesClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *KubernetesClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 集群摘除工作节点组并删除工作节点组 */
func (c *KubernetesClient) DeleteNodeGroup(request *kubernetes.DeleteNodeGroupRequest) (*kubernetes.DeleteNodeGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DeleteNodeGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 从工作节点组中删除指定实例 */
func (c *KubernetesClient) DeleteNodeInstances(request *kubernetes.DeleteNodeInstancesRequest) (*kubernetes.DeleteNodeInstancesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DeleteNodeInstancesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询Serverless集群版本列表 */
func (c *KubernetesClient) DescribeServerlessVersions(request *kubernetes.DescribeServerlessVersionsRequest) (*kubernetes.DescribeServerlessVersionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeServerlessVersionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询工作节点组列表 */
func (c *KubernetesClient) DescribeNodeGroups(request *kubernetes.DescribeNodeGroupsRequest) (*kubernetes.DescribeNodeGroupsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeNodeGroupsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询Serverless集群列表 */
func (c *KubernetesClient) DescribeServerlessClusters(request *kubernetes.DescribeServerlessClustersRequest) (*kubernetes.DescribeServerlessClustersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeServerlessClustersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改Serverless集群的 名称 和 描述。<br>集群 name 和 description 必须要指定一个 */
func (c *KubernetesClient) ModifyServerlessCluster(request *kubernetes.ModifyServerlessClusterRequest) (*kubernetes.ModifyServerlessClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.ModifyServerlessClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建工作节点组<br>
- 要求集群状态为running
 */
func (c *KubernetesClient) CreateNodeGroup(request *kubernetes.CreateNodeGroupRequest) (*kubernetes.CreateNodeGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.CreateNodeGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除集群，以及集群的所有node节点，网络，云盘等所有资源。 */
func (c *KubernetesClient) DeleteCluster(request *kubernetes.DeleteClusterRequest) (*kubernetes.DeleteClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DeleteClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改工作节点组的 名称 和 描述<br>name 和 description 必须要指定一个 */
func (c *KubernetesClient) ModifyNodeGroup(request *kubernetes.ModifyNodeGroupRequest) (*kubernetes.ModifyNodeGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.ModifyNodeGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除Serverless集群，以及集群的所有网络，云盘等所有资源。 */
func (c *KubernetesClient) DeleteServerlessCluster(request *kubernetes.DeleteServerlessClusterRequest) (*kubernetes.DeleteServerlessClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DeleteServerlessClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* - 创建集群
- 证书
  - 关于kubernetes的证书，默认生成，不需要用户传入。
- nodegroup
  - cluster必须与nodeGroup进行绑定
  - cluster支持多nodegroup
  - 状态
    - pending,reconciling,deleting状态不可以操作更新接口
    - running，running_with_error状态可以操作nodegroup所有接口
    - error状态只可以查询，删除
    - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
- 状态限制
  - pending,reconciling,deleting状态不可以操作更新接口
  - running状态可以操作cluster所有接口
  - error状态只可以查询，删除
  - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
 */
func (c *KubernetesClient) CreateCluster(request *kubernetes.CreateClusterRequest) (*kubernetes.CreateClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.CreateClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 调整工作节点组实例数量 */
func (c *KubernetesClient) SetNodeGroupSize(request *kubernetes.SetNodeGroupSizeRequest) (*kubernetes.SetNodeGroupSizeResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.SetNodeGroupSizeResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询单个集群详情。 */
func (c *KubernetesClient) DescribeCluster(request *kubernetes.DescribeClusterRequest) (*kubernetes.DescribeClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 修改集群的 名称 和 描述。<br>集群 name 和 description 必须要指定一个 */
func (c *KubernetesClient) ModifyCluster(request *kubernetes.ModifyClusterRequest) (*kubernetes.ModifyClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.ModifyClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询版本信息 */
func (c *KubernetesClient) DescribeVersions(request *kubernetes.DescribeVersionsRequest) (*kubernetes.DescribeVersionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeVersionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置工作节点组自动扩容缩容 */
func (c *KubernetesClient) SetNodeGroupCA(request *kubernetes.SetNodeGroupCARequest) (*kubernetes.SetNodeGroupCAResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.SetNodeGroupCAResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询 kubernetes 集群配额 */
func (c *KubernetesClient) DescribeQuotas(request *kubernetes.DescribeQuotasRequest) (*kubernetes.DescribeQuotasResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeQuotasResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询单个集群详情。 */
func (c *KubernetesClient) DescribeServerlessCluster(request *kubernetes.DescribeServerlessClusterRequest) (*kubernetes.DescribeServerlessClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeServerlessClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询集群列表 */
func (c *KubernetesClient) DescribeClusters(request *kubernetes.DescribeClustersRequest) (*kubernetes.DescribeClustersResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeClustersResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* - 创建Serverless集群
- 证书
  - 关于kubernetes的证书，默认生成，不需要用户传入。
- 状态限制
  - pending,reconciling,deleting状态不可以操作更新接口
  - running状态可以操作cluster所有接口
  - error状态只可以查询，删除
  - delete状态的cluster在十五分钟内可以查询，十五分钟后无法查询到
 */
func (c *KubernetesClient) CreateServerlessCluster(request *kubernetes.CreateServerlessClusterRequest) (*kubernetes.CreateServerlessClusterResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.CreateServerlessClusterResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询单个工作节点组详情 */
func (c *KubernetesClient) DescribeNodeGroup(request *kubernetes.DescribeNodeGroupRequest) (*kubernetes.DescribeNodeGroupResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &kubernetes.DescribeNodeGroupResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

