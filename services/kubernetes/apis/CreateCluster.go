// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    kubernetes "github.com/jdcloud-api/jdcloud-sdk-go/services/kubernetes/models"
)

type CreateClusterRequest struct {

    core.JDCloudRequest

    /* 地域 ID  */
    RegionId string `json:"regionId"`

    /* 名称（同一用户的 cluster 允许重名）  */
    Name string `json:"name"`

    /* 描述 (Optional) */
    Description *string `json:"description"`

    /* kubernetes的版本 (Optional) */
    Version *string `json:"version"`

    /* 是否是边缘计算集群 (Optional) */
    IsEdge *bool `json:"isEdge"`

    /* 集群所在的az  */
    Azs []string `json:"azs"`

    /* 集群节点组  */
    NodeGroup *kubernetes.NodeGroupSpec `json:"nodeGroup"`

    /* 用户的AccessKey，插件调用open-api时的认证凭证  */
    AccessKey string `json:"accessKey"`

    /* 用户的SecretKey，插件调用open-api时的认证凭证  */
    SecretKey string `json:"secretKey"`

    /* 集群组件配置 (Optional) */
    AddonsConfig []kubernetes.AddonConfigSpec `json:"addonsConfig"`

    /* 集群网络配置类型，取值：auto，customized，创建集群接口合并，原CreateCusomizedCluster接口废弃 (Optional) */
    ClusterNetworkType *string `json:"clusterNetworkType"`

    /* clusterNetworkType为【auto】时，此配置必须要配置 (Optional) */
    AutoClusterNetworkSpec *kubernetes.AutoClusterNetworkSpec `json:"autoClusterNetworkSpec"`

    /* clusterNetworkType为【customized】时，此配置必须要配置 (Optional) */
    CustomizedClusterNetworkSpec *kubernetes.CustomizedClusterNetworkSpec `json:"customizedClusterNetworkSpec"`

    /* 用户自定义的集群的环境信息，会影响到创建集群时的组件模版的渲染 (Optional) */
    ClusterEnvironments []kubernetes.StringKeyValuePair `json:"clusterEnvironments"`
}

/*
 * param regionId: 地域 ID (Required)
 * param name: 名称（同一用户的 cluster 允许重名） (Required)
 * param azs: 集群所在的az (Required)
 * param nodeGroup: 集群节点组 (Required)
 * param accessKey: 用户的AccessKey，插件调用open-api时的认证凭证 (Required)
 * param secretKey: 用户的SecretKey，插件调用open-api时的认证凭证 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateClusterRequest(
    regionId string,
    name string,
    azs []string,
    nodeGroup *kubernetes.NodeGroupSpec,
    accessKey string,
    secretKey string,
) *CreateClusterRequest {

	return &CreateClusterRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/clusters",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Name: name,
        Azs: azs,
        NodeGroup: nodeGroup,
        AccessKey: accessKey,
        SecretKey: secretKey,
	}
}

/*
 * param regionId: 地域 ID (Required)
 * param name: 名称（同一用户的 cluster 允许重名） (Required)
 * param description: 描述 (Optional)
 * param version: kubernetes的版本 (Optional)
 * param isEdge: 是否是边缘计算集群 (Optional)
 * param azs: 集群所在的az (Required)
 * param nodeGroup: 集群节点组 (Required)
 * param accessKey: 用户的AccessKey，插件调用open-api时的认证凭证 (Required)
 * param secretKey: 用户的SecretKey，插件调用open-api时的认证凭证 (Required)
 * param addonsConfig: 集群组件配置 (Optional)
 * param clusterNetworkType: 集群网络配置类型，取值：auto，customized，创建集群接口合并，原CreateCusomizedCluster接口废弃 (Optional)
 * param autoClusterNetworkSpec: clusterNetworkType为【auto】时，此配置必须要配置 (Optional)
 * param customizedClusterNetworkSpec: clusterNetworkType为【customized】时，此配置必须要配置 (Optional)
 * param clusterEnvironments: 用户自定义的集群的环境信息，会影响到创建集群时的组件模版的渲染 (Optional)
 */
func NewCreateClusterRequestWithAllParams(
    regionId string,
    name string,
    description *string,
    version *string,
    isEdge *bool,
    azs []string,
    nodeGroup *kubernetes.NodeGroupSpec,
    accessKey string,
    secretKey string,
    addonsConfig []kubernetes.AddonConfigSpec,
    clusterNetworkType *string,
    autoClusterNetworkSpec *kubernetes.AutoClusterNetworkSpec,
    customizedClusterNetworkSpec *kubernetes.CustomizedClusterNetworkSpec,
    clusterEnvironments []kubernetes.StringKeyValuePair,
) *CreateClusterRequest {

    return &CreateClusterRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/clusters",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Name: name,
        Description: description,
        Version: version,
        IsEdge: isEdge,
        Azs: azs,
        NodeGroup: nodeGroup,
        AccessKey: accessKey,
        SecretKey: secretKey,
        AddonsConfig: addonsConfig,
        ClusterNetworkType: clusterNetworkType,
        AutoClusterNetworkSpec: autoClusterNetworkSpec,
        CustomizedClusterNetworkSpec: customizedClusterNetworkSpec,
        ClusterEnvironments: clusterEnvironments,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateClusterRequestWithoutParam() *CreateClusterRequest {

    return &CreateClusterRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/clusters",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 ID(Required) */
func (r *CreateClusterRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param name: 名称（同一用户的 cluster 允许重名）(Required) */
func (r *CreateClusterRequest) SetName(name string) {
    r.Name = name
}
/* param description: 描述(Optional) */
func (r *CreateClusterRequest) SetDescription(description string) {
    r.Description = &description
}
/* param version: kubernetes的版本(Optional) */
func (r *CreateClusterRequest) SetVersion(version string) {
    r.Version = &version
}
/* param isEdge: 是否是边缘计算集群(Optional) */
func (r *CreateClusterRequest) SetIsEdge(isEdge bool) {
    r.IsEdge = &isEdge
}
/* param azs: 集群所在的az(Required) */
func (r *CreateClusterRequest) SetAzs(azs []string) {
    r.Azs = azs
}
/* param nodeGroup: 集群节点组(Required) */
func (r *CreateClusterRequest) SetNodeGroup(nodeGroup *kubernetes.NodeGroupSpec) {
    r.NodeGroup = nodeGroup
}
/* param accessKey: 用户的AccessKey，插件调用open-api时的认证凭证(Required) */
func (r *CreateClusterRequest) SetAccessKey(accessKey string) {
    r.AccessKey = accessKey
}
/* param secretKey: 用户的SecretKey，插件调用open-api时的认证凭证(Required) */
func (r *CreateClusterRequest) SetSecretKey(secretKey string) {
    r.SecretKey = secretKey
}
/* param addonsConfig: 集群组件配置(Optional) */
func (r *CreateClusterRequest) SetAddonsConfig(addonsConfig []kubernetes.AddonConfigSpec) {
    r.AddonsConfig = addonsConfig
}
/* param clusterNetworkType: 集群网络配置类型，取值：auto，customized，创建集群接口合并，原CreateCusomizedCluster接口废弃(Optional) */
func (r *CreateClusterRequest) SetClusterNetworkType(clusterNetworkType string) {
    r.ClusterNetworkType = &clusterNetworkType
}
/* param autoClusterNetworkSpec: clusterNetworkType为【auto】时，此配置必须要配置(Optional) */
func (r *CreateClusterRequest) SetAutoClusterNetworkSpec(autoClusterNetworkSpec *kubernetes.AutoClusterNetworkSpec) {
    r.AutoClusterNetworkSpec = autoClusterNetworkSpec
}
/* param customizedClusterNetworkSpec: clusterNetworkType为【customized】时，此配置必须要配置(Optional) */
func (r *CreateClusterRequest) SetCustomizedClusterNetworkSpec(customizedClusterNetworkSpec *kubernetes.CustomizedClusterNetworkSpec) {
    r.CustomizedClusterNetworkSpec = customizedClusterNetworkSpec
}
/* param clusterEnvironments: 用户自定义的集群的环境信息，会影响到创建集群时的组件模版的渲染(Optional) */
func (r *CreateClusterRequest) SetClusterEnvironments(clusterEnvironments []kubernetes.StringKeyValuePair) {
    r.ClusterEnvironments = clusterEnvironments
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateClusterRequest) GetRegionId() string {
    return r.RegionId
}

type CreateClusterResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateClusterResult `json:"result"`
}

type CreateClusterResult struct {
    ClusterId string `json:"clusterId"`
}