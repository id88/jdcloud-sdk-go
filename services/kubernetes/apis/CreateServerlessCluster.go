// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    kubernetes "github.com/jdcloud-api/jdcloud-sdk-go/services/kubernetes/models"
)

type CreateServerlessClusterRequest struct {

    core.JDCloudRequest

    /* 地域 ID  */
    RegionId string `json:"regionId"`

    /* 名称（同一用户的 cluster 允许重名）  */
    Name string `json:"name"`

    /* 描述 (Optional) */
    Description *string `json:"description"`

    /* kubernetes的版本 (Optional) */
    Version *string `json:"version"`

    /* 集群所在的az  */
    Azs []string `json:"azs"`

    /* 用户的AccessKey，插件调用open-api时的认证凭证  */
    AccessKey string `json:"accessKey"`

    /* 用户的SecretKey，插件调用open-api时的认证凭证  */
    SecretKey string `json:"secretKey"`

    /* 集群组件配置 (Optional) */
    AddonsConfig []kubernetes.AddonConfigSpec `json:"addonsConfig"`

    /* 集群网络配置  */
    ClusterNetworkSpec *kubernetes.ServerlessClusterNetworkSpec `json:"clusterNetworkSpec"`

    /* 用户自定义的集群的环境信息，会影响到创建集群时的组件模版的渲染 (Optional) */
    ClusterEnvironments []kubernetes.StringKeyValuePair `json:"clusterEnvironments"`
}

/*
 * param regionId: 地域 ID (Required)
 * param name: 名称（同一用户的 cluster 允许重名） (Required)
 * param azs: 集群所在的az (Required)
 * param accessKey: 用户的AccessKey，插件调用open-api时的认证凭证 (Required)
 * param secretKey: 用户的SecretKey，插件调用open-api时的认证凭证 (Required)
 * param clusterNetworkSpec: 集群网络配置 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateServerlessClusterRequest(
    regionId string,
    name string,
    azs []string,
    accessKey string,
    secretKey string,
    clusterNetworkSpec *kubernetes.ServerlessClusterNetworkSpec,
) *CreateServerlessClusterRequest {

	return &CreateServerlessClusterRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/serverless-clusters",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        Name: name,
        Azs: azs,
        AccessKey: accessKey,
        SecretKey: secretKey,
        ClusterNetworkSpec: clusterNetworkSpec,
	}
}

/*
 * param regionId: 地域 ID (Required)
 * param name: 名称（同一用户的 cluster 允许重名） (Required)
 * param description: 描述 (Optional)
 * param version: kubernetes的版本 (Optional)
 * param azs: 集群所在的az (Required)
 * param accessKey: 用户的AccessKey，插件调用open-api时的认证凭证 (Required)
 * param secretKey: 用户的SecretKey，插件调用open-api时的认证凭证 (Required)
 * param addonsConfig: 集群组件配置 (Optional)
 * param clusterNetworkSpec: 集群网络配置 (Required)
 * param clusterEnvironments: 用户自定义的集群的环境信息，会影响到创建集群时的组件模版的渲染 (Optional)
 */
func NewCreateServerlessClusterRequestWithAllParams(
    regionId string,
    name string,
    description *string,
    version *string,
    azs []string,
    accessKey string,
    secretKey string,
    addonsConfig []kubernetes.AddonConfigSpec,
    clusterNetworkSpec *kubernetes.ServerlessClusterNetworkSpec,
    clusterEnvironments []kubernetes.StringKeyValuePair,
) *CreateServerlessClusterRequest {

    return &CreateServerlessClusterRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/serverless-clusters",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        Name: name,
        Description: description,
        Version: version,
        Azs: azs,
        AccessKey: accessKey,
        SecretKey: secretKey,
        AddonsConfig: addonsConfig,
        ClusterNetworkSpec: clusterNetworkSpec,
        ClusterEnvironments: clusterEnvironments,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateServerlessClusterRequestWithoutParam() *CreateServerlessClusterRequest {

    return &CreateServerlessClusterRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/serverless-clusters",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 ID(Required) */
func (r *CreateServerlessClusterRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param name: 名称（同一用户的 cluster 允许重名）(Required) */
func (r *CreateServerlessClusterRequest) SetName(name string) {
    r.Name = name
}
/* param description: 描述(Optional) */
func (r *CreateServerlessClusterRequest) SetDescription(description string) {
    r.Description = &description
}
/* param version: kubernetes的版本(Optional) */
func (r *CreateServerlessClusterRequest) SetVersion(version string) {
    r.Version = &version
}
/* param azs: 集群所在的az(Required) */
func (r *CreateServerlessClusterRequest) SetAzs(azs []string) {
    r.Azs = azs
}
/* param accessKey: 用户的AccessKey，插件调用open-api时的认证凭证(Required) */
func (r *CreateServerlessClusterRequest) SetAccessKey(accessKey string) {
    r.AccessKey = accessKey
}
/* param secretKey: 用户的SecretKey，插件调用open-api时的认证凭证(Required) */
func (r *CreateServerlessClusterRequest) SetSecretKey(secretKey string) {
    r.SecretKey = secretKey
}
/* param addonsConfig: 集群组件配置(Optional) */
func (r *CreateServerlessClusterRequest) SetAddonsConfig(addonsConfig []kubernetes.AddonConfigSpec) {
    r.AddonsConfig = addonsConfig
}
/* param clusterNetworkSpec: 集群网络配置(Required) */
func (r *CreateServerlessClusterRequest) SetClusterNetworkSpec(clusterNetworkSpec *kubernetes.ServerlessClusterNetworkSpec) {
    r.ClusterNetworkSpec = clusterNetworkSpec
}
/* param clusterEnvironments: 用户自定义的集群的环境信息，会影响到创建集群时的组件模版的渲染(Optional) */
func (r *CreateServerlessClusterRequest) SetClusterEnvironments(clusterEnvironments []kubernetes.StringKeyValuePair) {
    r.ClusterEnvironments = clusterEnvironments
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateServerlessClusterRequest) GetRegionId() string {
    return r.RegionId
}

type CreateServerlessClusterResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateServerlessClusterResult `json:"result"`
}

type CreateServerlessClusterResult struct {
    ClusterId string `json:"clusterId"`
}