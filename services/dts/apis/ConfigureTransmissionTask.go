// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    dts "github.com/jdcloud-api/jdcloud-sdk-go/services/dts/models"
)

type ConfigureTransmissionTaskRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》]  */
    RegionId string `json:"regionId"`

    /* DTS数据传输任务ID  */
    TaskId string `json:"taskId"`

    /* 传输任务模式：可选值：structureInitialization、dataInitialization、dataSynchronization，分别对应结构初始化，全量数据初始化，增量数据传输 (Optional) */
    TransmissionMode []string `json:"transmissionMode"`

    /* 目标端执行策略，对于目标MySQL，支持：覆盖写入 mysql-replace-engine，冲突检测 conflict-detect-engine (Optional) */
    DestExecutionStrategy *string `json:"destExecutionStrategy"`

    /* 任务设置 (Optional) */
    Options *dts.PipelineOptions `json:"options"`

    /* 待传输的对象  */
    TransmissionObject interface{} `json:"transmissionObject"`

    /* 任务名称，名称只支持中文、数字、大小写字母及英文下划线“_”及中划线“-”，不超过32字符  */
    TaskName string `json:"taskName"`

    /* 源端连接信息  */
    Source *dts.TransmissionEndpoint `json:"source"`

    /* 目标端连接信息  */
    Destination *dts.TransmissionEndpoint `json:"destination"`

    /* 增量数据传输的启动位点 (Optional) */
    CheckPoint *dts.TransmissionCheckpoint `json:"checkPoint"`

    /* 任务自定义设置 (Optional) */
    CustomOptions *dts.CustomOptions `json:"customOptions"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param taskId: DTS数据传输任务ID (Required)
 * param transmissionObject: 待传输的对象 (Required)
 * param taskName: 任务名称，名称只支持中文、数字、大小写字母及英文下划线“_”及中划线“-”，不超过32字符 (Required)
 * param source: 源端连接信息 (Required)
 * param destination: 目标端连接信息 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewConfigureTransmissionTaskRequest(
    regionId string,
    taskId string,
    transmissionObject interface{},
    taskName string,
    source *dts.TransmissionEndpoint,
    destination *dts.TransmissionEndpoint,
) *ConfigureTransmissionTaskRequest {

	return &ConfigureTransmissionTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/dts/{taskId}/configure",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        TaskId: taskId,
        TransmissionObject: transmissionObject,
        TaskName: taskName,
        Source: source,
        Destination: destination,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param taskId: DTS数据传输任务ID (Required)
 * param transmissionMode: 传输任务模式：可选值：structureInitialization、dataInitialization、dataSynchronization，分别对应结构初始化，全量数据初始化，增量数据传输 (Optional)
 * param destExecutionStrategy: 目标端执行策略，对于目标MySQL，支持：覆盖写入 mysql-replace-engine，冲突检测 conflict-detect-engine (Optional)
 * param options: 任务设置 (Optional)
 * param transmissionObject: 待传输的对象 (Required)
 * param taskName: 任务名称，名称只支持中文、数字、大小写字母及英文下划线“_”及中划线“-”，不超过32字符 (Required)
 * param source: 源端连接信息 (Required)
 * param destination: 目标端连接信息 (Required)
 * param checkPoint: 增量数据传输的启动位点 (Optional)
 * param customOptions: 任务自定义设置 (Optional)
 */
func NewConfigureTransmissionTaskRequestWithAllParams(
    regionId string,
    taskId string,
    transmissionMode []string,
    destExecutionStrategy *string,
    options *dts.PipelineOptions,
    transmissionObject interface{},
    taskName string,
    source *dts.TransmissionEndpoint,
    destination *dts.TransmissionEndpoint,
    checkPoint *dts.TransmissionCheckpoint,
    customOptions *dts.CustomOptions,
) *ConfigureTransmissionTaskRequest {

    return &ConfigureTransmissionTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dts/{taskId}/configure",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        TaskId: taskId,
        TransmissionMode: transmissionMode,
        DestExecutionStrategy: destExecutionStrategy,
        Options: options,
        TransmissionObject: transmissionObject,
        TaskName: taskName,
        Source: source,
        Destination: destination,
        CheckPoint: checkPoint,
        CustomOptions: customOptions,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewConfigureTransmissionTaskRequestWithoutParam() *ConfigureTransmissionTaskRequest {

    return &ConfigureTransmissionTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dts/{taskId}/configure",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](Required) */
func (r *ConfigureTransmissionTaskRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param taskId: DTS数据传输任务ID(Required) */
func (r *ConfigureTransmissionTaskRequest) SetTaskId(taskId string) {
    r.TaskId = taskId
}
/* param transmissionMode: 传输任务模式：可选值：structureInitialization、dataInitialization、dataSynchronization，分别对应结构初始化，全量数据初始化，增量数据传输(Optional) */
func (r *ConfigureTransmissionTaskRequest) SetTransmissionMode(transmissionMode []string) {
    r.TransmissionMode = transmissionMode
}
/* param destExecutionStrategy: 目标端执行策略，对于目标MySQL，支持：覆盖写入 mysql-replace-engine，冲突检测 conflict-detect-engine(Optional) */
func (r *ConfigureTransmissionTaskRequest) SetDestExecutionStrategy(destExecutionStrategy string) {
    r.DestExecutionStrategy = &destExecutionStrategy
}
/* param options: 任务设置(Optional) */
func (r *ConfigureTransmissionTaskRequest) SetOptions(options *dts.PipelineOptions) {
    r.Options = options
}
/* param transmissionObject: 待传输的对象(Required) */
func (r *ConfigureTransmissionTaskRequest) SetTransmissionObject(transmissionObject interface{}) {
    r.TransmissionObject = transmissionObject
}
/* param taskName: 任务名称，名称只支持中文、数字、大小写字母及英文下划线“_”及中划线“-”，不超过32字符(Required) */
func (r *ConfigureTransmissionTaskRequest) SetTaskName(taskName string) {
    r.TaskName = taskName
}
/* param source: 源端连接信息(Required) */
func (r *ConfigureTransmissionTaskRequest) SetSource(source *dts.TransmissionEndpoint) {
    r.Source = source
}
/* param destination: 目标端连接信息(Required) */
func (r *ConfigureTransmissionTaskRequest) SetDestination(destination *dts.TransmissionEndpoint) {
    r.Destination = destination
}
/* param checkPoint: 增量数据传输的启动位点(Optional) */
func (r *ConfigureTransmissionTaskRequest) SetCheckPoint(checkPoint *dts.TransmissionCheckpoint) {
    r.CheckPoint = checkPoint
}
/* param customOptions: 任务自定义设置(Optional) */
func (r *ConfigureTransmissionTaskRequest) SetCustomOptions(customOptions *dts.CustomOptions) {
    r.CustomOptions = customOptions
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ConfigureTransmissionTaskRequest) GetRegionId() string {
    return r.RegionId
}

type ConfigureTransmissionTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ConfigureTransmissionTaskResult `json:"result"`
}

type ConfigureTransmissionTaskResult struct {
    Id string `json:"id"`
}