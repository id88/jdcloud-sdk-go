// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    charge "github.com/jdcloud-api/jdcloud-sdk-go/services/charge/models"
)

type CreateTransmissionTaskRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》]  */
    RegionId string `json:"regionId"`

    /* 实例类型，取值为：Sync：同步、Subscribe：订阅、Migration：迁移、DisasterRecovery 灾备，默认取值为：Sync (Optional) */
    TransmissionMethod *string `json:"transmissionMethod"`

    /* 数据传输拓扑，支持：oneway - 单向数据传输、bidirectional - 双向数据传输，默认取值为：oneway (Optional) */
    Topology *string `json:"topology"`

    /* 数据传输实例所属VPC。  */
    Vpc string `json:"vpc"`

    /* 数据传输实例所属子网。  */
    Subnet string `json:"subnet"`

    /* 数据传输实例所属可用区，可选 (Optional) */
    AvailableZone *string `json:"availableZone"`

    /* 数据传输实例规格，支持：dts.m1.medium、dts.m1.large、dts.m1.xlarge  */
    InstanceClass string `json:"instanceClass"`

    /* 计费方式，数据传输支持包年包月、按配置计费。  */
    ChargeSpec *charge.ChargeSpec `json:"chargeSpec"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param vpc: 数据传输实例所属VPC。 (Required)
 * param subnet: 数据传输实例所属子网。 (Required)
 * param instanceClass: 数据传输实例规格，支持：dts.m1.medium、dts.m1.large、dts.m1.xlarge (Required)
 * param chargeSpec: 计费方式，数据传输支持包年包月、按配置计费。 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateTransmissionTaskRequest(
    regionId string,
    vpc string,
    subnet string,
    instanceClass string,
    chargeSpec *charge.ChargeSpec,
) *CreateTransmissionTaskRequest {

	return &CreateTransmissionTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/dts",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        RegionId: regionId,
        Vpc: vpc,
        Subnet: subnet,
        InstanceClass: instanceClass,
        ChargeSpec: chargeSpec,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》] (Required)
 * param transmissionMethod: 实例类型，取值为：Sync：同步、Subscribe：订阅、Migration：迁移、DisasterRecovery 灾备，默认取值为：Sync (Optional)
 * param topology: 数据传输拓扑，支持：oneway - 单向数据传输、bidirectional - 双向数据传输，默认取值为：oneway (Optional)
 * param vpc: 数据传输实例所属VPC。 (Required)
 * param subnet: 数据传输实例所属子网。 (Required)
 * param availableZone: 数据传输实例所属可用区，可选 (Optional)
 * param instanceClass: 数据传输实例规格，支持：dts.m1.medium、dts.m1.large、dts.m1.xlarge (Required)
 * param chargeSpec: 计费方式，数据传输支持包年包月、按配置计费。 (Required)
 */
func NewCreateTransmissionTaskRequestWithAllParams(
    regionId string,
    transmissionMethod *string,
    topology *string,
    vpc string,
    subnet string,
    availableZone *string,
    instanceClass string,
    chargeSpec *charge.ChargeSpec,
) *CreateTransmissionTaskRequest {

    return &CreateTransmissionTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dts",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        RegionId: regionId,
        TransmissionMethod: transmissionMethod,
        Topology: topology,
        Vpc: vpc,
        Subnet: subnet,
        AvailableZone: availableZone,
        InstanceClass: instanceClass,
        ChargeSpec: chargeSpec,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateTransmissionTaskRequestWithoutParam() *CreateTransmissionTaskRequest {

    return &CreateTransmissionTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/dts",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](Required) */
func (r *CreateTransmissionTaskRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param transmissionMethod: 实例类型，取值为：Sync：同步、Subscribe：订阅、Migration：迁移、DisasterRecovery 灾备，默认取值为：Sync(Optional) */
func (r *CreateTransmissionTaskRequest) SetTransmissionMethod(transmissionMethod string) {
    r.TransmissionMethod = &transmissionMethod
}
/* param topology: 数据传输拓扑，支持：oneway - 单向数据传输、bidirectional - 双向数据传输，默认取值为：oneway(Optional) */
func (r *CreateTransmissionTaskRequest) SetTopology(topology string) {
    r.Topology = &topology
}
/* param vpc: 数据传输实例所属VPC。(Required) */
func (r *CreateTransmissionTaskRequest) SetVpc(vpc string) {
    r.Vpc = vpc
}
/* param subnet: 数据传输实例所属子网。(Required) */
func (r *CreateTransmissionTaskRequest) SetSubnet(subnet string) {
    r.Subnet = subnet
}
/* param availableZone: 数据传输实例所属可用区，可选(Optional) */
func (r *CreateTransmissionTaskRequest) SetAvailableZone(availableZone string) {
    r.AvailableZone = &availableZone
}
/* param instanceClass: 数据传输实例规格，支持：dts.m1.medium、dts.m1.large、dts.m1.xlarge(Required) */
func (r *CreateTransmissionTaskRequest) SetInstanceClass(instanceClass string) {
    r.InstanceClass = instanceClass
}
/* param chargeSpec: 计费方式，数据传输支持包年包月、按配置计费。(Required) */
func (r *CreateTransmissionTaskRequest) SetChargeSpec(chargeSpec *charge.ChargeSpec) {
    r.ChargeSpec = chargeSpec
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateTransmissionTaskRequest) GetRegionId() string {
    return r.RegionId
}

type CreateTransmissionTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateTransmissionTaskResult `json:"result"`
}

type CreateTransmissionTaskResult struct {
    Id string `json:"id"`
    OrderId string `json:"orderId"`
}