// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    starshield "github.com/jdcloud-api/jdcloud-sdk-go/services/starshield/models"
)

type ZoneTrafficMultiDateHistogramRequest struct {

    core.JDCloudRequest

    /* 域名标识  */
    Zone_identifier string `json:"zone_identifier"`

    /* all - 所有
normal - 业务
mitigation - 缓解
cache - 缓存
origin - 回源
all/normal/mitigation/cache/origin的任意组合
  */
    QueryModes []string `json:"queryModes"`

    /* 域名  */
    ZoneName string `json:"zoneName"`

    /* 开始时间  */
    Since string `json:"since"`

    /* 结束时间  */
    Until string `json:"until"`
}

/*
 * param zone_identifier: 域名标识 (Required)
 * param queryModes: all - 所有
normal - 业务
mitigation - 缓解
cache - 缓存
origin - 回源
all/normal/mitigation/cache/origin的任意组合
 (Required)
 * param zoneName: 域名 (Required)
 * param since: 开始时间 (Required)
 * param until: 结束时间 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewZoneTrafficMultiDateHistogramRequest(
    zone_identifier string,
    queryModes []string,
    zoneName string,
    since string,
    until string,
) *ZoneTrafficMultiDateHistogramRequest {

	return &ZoneTrafficMultiDateHistogramRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/zones/{zone_identifier}/zoneTrafficMultiDateHistogram",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Zone_identifier: zone_identifier,
        QueryModes: queryModes,
        ZoneName: zoneName,
        Since: since,
        Until: until,
	}
}

/*
 * param zone_identifier: 域名标识 (Required)
 * param queryModes: all - 所有
normal - 业务
mitigation - 缓解
cache - 缓存
origin - 回源
all/normal/mitigation/cache/origin的任意组合
 (Required)
 * param zoneName: 域名 (Required)
 * param since: 开始时间 (Required)
 * param until: 结束时间 (Required)
 */
func NewZoneTrafficMultiDateHistogramRequestWithAllParams(
    zone_identifier string,
    queryModes []string,
    zoneName string,
    since string,
    until string,
) *ZoneTrafficMultiDateHistogramRequest {

    return &ZoneTrafficMultiDateHistogramRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/zoneTrafficMultiDateHistogram",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Zone_identifier: zone_identifier,
        QueryModes: queryModes,
        ZoneName: zoneName,
        Since: since,
        Until: until,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewZoneTrafficMultiDateHistogramRequestWithoutParam() *ZoneTrafficMultiDateHistogramRequest {

    return &ZoneTrafficMultiDateHistogramRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/zoneTrafficMultiDateHistogram",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param zone_identifier: 域名标识(Required) */
func (r *ZoneTrafficMultiDateHistogramRequest) SetZone_identifier(zone_identifier string) {
    r.Zone_identifier = zone_identifier
}
/* param queryModes: all - 所有
normal - 业务
mitigation - 缓解
cache - 缓存
origin - 回源
all/normal/mitigation/cache/origin的任意组合
(Required) */
func (r *ZoneTrafficMultiDateHistogramRequest) SetQueryModes(queryModes []string) {
    r.QueryModes = queryModes
}
/* param zoneName: 域名(Required) */
func (r *ZoneTrafficMultiDateHistogramRequest) SetZoneName(zoneName string) {
    r.ZoneName = zoneName
}
/* param since: 开始时间(Required) */
func (r *ZoneTrafficMultiDateHistogramRequest) SetSince(since string) {
    r.Since = since
}
/* param until: 结束时间(Required) */
func (r *ZoneTrafficMultiDateHistogramRequest) SetUntil(until string) {
    r.Until = until
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ZoneTrafficMultiDateHistogramRequest) GetRegionId() string {
    return ""
}

type ZoneTrafficMultiDateHistogramResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ZoneTrafficMultiDateHistogramResult `json:"result"`
}

type ZoneTrafficMultiDateHistogramResult struct {
    DateHistograms []starshield.DateHistogram `json:"dateHistograms"`
    TimeScope []int `json:"timeScope"`
    Since string `json:"since"`
    Util string `json:"util"`
}