// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    starshield "github.com/jdcloud-api/jdcloud-sdk-go/services/starshield/models"
)

type EditSSLConfigurationRequest struct {

    core.JDCloudRequest

    /*   */
    Zone_identifier string `json:"zone_identifier"`

    /*   */
    Identifier string `json:"identifier"`

    /* 域的私钥 (Optional) */
    Private_key *string `json:"private_key"`

    /* 域的SSL证书或证书以及中间证书 (Optional) */
    Certificate *string `json:"certificate"`

    /* 合法值ubiquitous/optimal/force，默认值ubiquitous。
ubiquitous：SSL泛捆绑在各处有着最高的概率被验证，甚至能被使用过时的或不寻常的信任存储的客户端验证。
optimal：最佳捆绑使用最短的认证链和最新的中间证书。
force：强制捆绑会验证证书链，但不以其他方式修改证书链。
 (Optional) */
    Bundle_method *string `json:"bundle_method"`

    /*  (Optional) */
    Geo_restrictions *starshield.Geo_restrictions `json:"geo_restrictions"`
}

/*
 * param zone_identifier:  (Required)
 * param identifier:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewEditSSLConfigurationRequest(
    zone_identifier string,
    identifier string,
) *EditSSLConfigurationRequest {

	return &EditSSLConfigurationRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/zones/{zone_identifier}/custom_certificates/{identifier}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        Zone_identifier: zone_identifier,
        Identifier: identifier,
	}
}

/*
 * param zone_identifier:  (Required)
 * param identifier:  (Required)
 * param private_key: 域的私钥 (Optional)
 * param certificate: 域的SSL证书或证书以及中间证书 (Optional)
 * param bundle_method: 合法值ubiquitous/optimal/force，默认值ubiquitous。
ubiquitous：SSL泛捆绑在各处有着最高的概率被验证，甚至能被使用过时的或不寻常的信任存储的客户端验证。
optimal：最佳捆绑使用最短的认证链和最新的中间证书。
force：强制捆绑会验证证书链，但不以其他方式修改证书链。
 (Optional)
 * param geo_restrictions:  (Optional)
 */
func NewEditSSLConfigurationRequestWithAllParams(
    zone_identifier string,
    identifier string,
    private_key *string,
    certificate *string,
    bundle_method *string,
    geo_restrictions *starshield.Geo_restrictions,
) *EditSSLConfigurationRequest {

    return &EditSSLConfigurationRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/custom_certificates/{identifier}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        Zone_identifier: zone_identifier,
        Identifier: identifier,
        Private_key: private_key,
        Certificate: certificate,
        Bundle_method: bundle_method,
        Geo_restrictions: geo_restrictions,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewEditSSLConfigurationRequestWithoutParam() *EditSSLConfigurationRequest {

    return &EditSSLConfigurationRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/custom_certificates/{identifier}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param zone_identifier: (Required) */
func (r *EditSSLConfigurationRequest) SetZone_identifier(zone_identifier string) {
    r.Zone_identifier = zone_identifier
}
/* param identifier: (Required) */
func (r *EditSSLConfigurationRequest) SetIdentifier(identifier string) {
    r.Identifier = identifier
}
/* param private_key: 域的私钥(Optional) */
func (r *EditSSLConfigurationRequest) SetPrivate_key(private_key string) {
    r.Private_key = &private_key
}
/* param certificate: 域的SSL证书或证书以及中间证书(Optional) */
func (r *EditSSLConfigurationRequest) SetCertificate(certificate string) {
    r.Certificate = &certificate
}
/* param bundle_method: 合法值ubiquitous/optimal/force，默认值ubiquitous。
ubiquitous：SSL泛捆绑在各处有着最高的概率被验证，甚至能被使用过时的或不寻常的信任存储的客户端验证。
optimal：最佳捆绑使用最短的认证链和最新的中间证书。
force：强制捆绑会验证证书链，但不以其他方式修改证书链。
(Optional) */
func (r *EditSSLConfigurationRequest) SetBundle_method(bundle_method string) {
    r.Bundle_method = &bundle_method
}
/* param geo_restrictions: (Optional) */
func (r *EditSSLConfigurationRequest) SetGeo_restrictions(geo_restrictions *starshield.Geo_restrictions) {
    r.Geo_restrictions = geo_restrictions
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r EditSSLConfigurationRequest) GetRegionId() string {
    return ""
}

type EditSSLConfigurationResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result EditSSLConfigurationResult `json:"result"`
}

type EditSSLConfigurationResult struct {
    Data starshield.CustomSSL `json:"data"`
}