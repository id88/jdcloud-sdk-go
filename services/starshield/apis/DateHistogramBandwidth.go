// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    starshield "github.com/jdcloud-api/jdcloud-sdk-go/services/starshield/models"
)

type DateHistogramBandwidthRequest struct {

    core.JDCloudRequest

    /*   */
    Zone_identifier string `json:"zone_identifier"`

    /*  (Optional) */
    ZoneName *string `json:"zoneName"`

    /*  (Optional) */
    Since *string `json:"since"`

    /*  (Optional) */
    Until *string `json:"until"`

    /*  (Optional) */
    TopK *int `json:"topK"`

    /*  (Optional) */
    CriterionName *string `json:"criterionName"`

    /*  (Optional) */
    Filters []starshield.AnalyticsReportingFilter `json:"filters"`
}

/*
 * param zone_identifier:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDateHistogramBandwidthRequest(
    zone_identifier string,
) *DateHistogramBandwidthRequest {

	return &DateHistogramBandwidthRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/zones/{zone_identifier}/analytics$$dateHistogramBandwidth",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Zone_identifier: zone_identifier,
	}
}

/*
 * param zone_identifier:  (Required)
 * param zoneName:  (Optional)
 * param since:  (Optional)
 * param until:  (Optional)
 * param topK:  (Optional)
 * param criterionName:  (Optional)
 * param filters:  (Optional)
 */
func NewDateHistogramBandwidthRequestWithAllParams(
    zone_identifier string,
    zoneName *string,
    since *string,
    until *string,
    topK *int,
    criterionName *string,
    filters []starshield.AnalyticsReportingFilter,
) *DateHistogramBandwidthRequest {

    return &DateHistogramBandwidthRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/analytics$$dateHistogramBandwidth",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Zone_identifier: zone_identifier,
        ZoneName: zoneName,
        Since: since,
        Until: until,
        TopK: topK,
        CriterionName: criterionName,
        Filters: filters,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDateHistogramBandwidthRequestWithoutParam() *DateHistogramBandwidthRequest {

    return &DateHistogramBandwidthRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/analytics$$dateHistogramBandwidth",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param zone_identifier: (Required) */
func (r *DateHistogramBandwidthRequest) SetZone_identifier(zone_identifier string) {
    r.Zone_identifier = zone_identifier
}
/* param zoneName: (Optional) */
func (r *DateHistogramBandwidthRequest) SetZoneName(zoneName string) {
    r.ZoneName = &zoneName
}
/* param since: (Optional) */
func (r *DateHistogramBandwidthRequest) SetSince(since string) {
    r.Since = &since
}
/* param until: (Optional) */
func (r *DateHistogramBandwidthRequest) SetUntil(until string) {
    r.Until = &until
}
/* param topK: (Optional) */
func (r *DateHistogramBandwidthRequest) SetTopK(topK int) {
    r.TopK = &topK
}
/* param criterionName: (Optional) */
func (r *DateHistogramBandwidthRequest) SetCriterionName(criterionName string) {
    r.CriterionName = &criterionName
}
/* param filters: (Optional) */
func (r *DateHistogramBandwidthRequest) SetFilters(filters []starshield.AnalyticsReportingFilter) {
    r.Filters = filters
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DateHistogramBandwidthRequest) GetRegionId() string {
    return ""
}

type DateHistogramBandwidthResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DateHistogramBandwidthResult `json:"result"`
}

type DateHistogramBandwidthResult struct {
    DateHistograms []starshield.DateHistogram `json:"dateHistograms"`
    TimeScope []int `json:"timeScope"`
    Since string `json:"since"`
    Util string `json:"util"`
}