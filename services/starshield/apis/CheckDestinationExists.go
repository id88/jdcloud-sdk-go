// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CheckDestinationExistsRequest struct {

    core.JDCloudRequest

    /*   */
    Zone_identifier string `json:"zone_identifier"`

    /* 唯一标识数据推送目的地的字符串。可能包括目的地支持的其他参数。
例如：splunk://splunk.cf-analytics.com:8088/services/collector/raw?channel=xxx&header_Authorization=Splunk xxx&sourcetype=xxx&insecure-skip-verify=false
 (Optional) */
    Destination_conf *string `json:"destination_conf"`
}

/*
 * param zone_identifier:  (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCheckDestinationExistsRequest(
    zone_identifier string,
) *CheckDestinationExistsRequest {

	return &CheckDestinationExistsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/zones/{zone_identifier}/logpush$$validate$$destination$$exists",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        Zone_identifier: zone_identifier,
	}
}

/*
 * param zone_identifier:  (Required)
 * param destination_conf: 唯一标识数据推送目的地的字符串。可能包括目的地支持的其他参数。
例如：splunk://splunk.cf-analytics.com:8088/services/collector/raw?channel=xxx&header_Authorization=Splunk xxx&sourcetype=xxx&insecure-skip-verify=false
 (Optional)
 */
func NewCheckDestinationExistsRequestWithAllParams(
    zone_identifier string,
    destination_conf *string,
) *CheckDestinationExistsRequest {

    return &CheckDestinationExistsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/logpush$$validate$$destination$$exists",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        Zone_identifier: zone_identifier,
        Destination_conf: destination_conf,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCheckDestinationExistsRequestWithoutParam() *CheckDestinationExistsRequest {

    return &CheckDestinationExistsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/zones/{zone_identifier}/logpush$$validate$$destination$$exists",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param zone_identifier: (Required) */
func (r *CheckDestinationExistsRequest) SetZone_identifier(zone_identifier string) {
    r.Zone_identifier = zone_identifier
}
/* param destination_conf: 唯一标识数据推送目的地的字符串。可能包括目的地支持的其他参数。
例如：splunk://splunk.cf-analytics.com:8088/services/collector/raw?channel=xxx&header_Authorization=Splunk xxx&sourcetype=xxx&insecure-skip-verify=false
(Optional) */
func (r *CheckDestinationExistsRequest) SetDestination_conf(destination_conf string) {
    r.Destination_conf = &destination_conf
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CheckDestinationExistsRequest) GetRegionId() string {
    return ""
}

type CheckDestinationExistsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CheckDestinationExistsResult `json:"result"`
}

type CheckDestinationExistsResult struct {
    Data bool `json:"data"`
}