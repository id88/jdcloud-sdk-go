// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type UpdateTriggerRequest struct {

    core.JDCloudRequest

    /* 地域ID。  */
    RegionId string `json:"regionId"`

    /* 服务名称。  */
    ServiceName string `json:"serviceName"`

    /* 函数名称。  */
    FunctionName string `json:"functionName"`

    /* 触发器名称。  */
    TriggerName string `json:"triggerName"`

    /* 修改后的描述 (Optional) */
    Description *string `json:"description"`

    /* 修改后的配置 (Optional) */
    TriggerConfig *string `json:"triggerConfig"`

    /* 是否启用或禁用触发器，默认为不更改触发器状态 (Optional) */
    Enable *bool `json:"enable"`
}

/*
 * param regionId: 地域ID。 (Required)
 * param serviceName: 服务名称。 (Required)
 * param functionName: 函数名称。 (Required)
 * param triggerName: 触发器名称。 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateTriggerRequest(
    regionId string,
    serviceName string,
    functionName string,
    triggerName string,
) *UpdateTriggerRequest {

	return &UpdateTriggerRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/services/{serviceName}/functions/{functionName}/triggers/{triggerName}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ServiceName: serviceName,
        FunctionName: functionName,
        TriggerName: triggerName,
	}
}

/*
 * param regionId: 地域ID。 (Required)
 * param serviceName: 服务名称。 (Required)
 * param functionName: 函数名称。 (Required)
 * param triggerName: 触发器名称。 (Required)
 * param description: 修改后的描述 (Optional)
 * param triggerConfig: 修改后的配置 (Optional)
 * param enable: 是否启用或禁用触发器，默认为不更改触发器状态 (Optional)
 */
func NewUpdateTriggerRequestWithAllParams(
    regionId string,
    serviceName string,
    functionName string,
    triggerName string,
    description *string,
    triggerConfig *string,
    enable *bool,
) *UpdateTriggerRequest {

    return &UpdateTriggerRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/services/{serviceName}/functions/{functionName}/triggers/{triggerName}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ServiceName: serviceName,
        FunctionName: functionName,
        TriggerName: triggerName,
        Description: description,
        TriggerConfig: triggerConfig,
        Enable: enable,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateTriggerRequestWithoutParam() *UpdateTriggerRequest {

    return &UpdateTriggerRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/services/{serviceName}/functions/{functionName}/triggers/{triggerName}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID。(Required) */
func (r *UpdateTriggerRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param serviceName: 服务名称。(Required) */
func (r *UpdateTriggerRequest) SetServiceName(serviceName string) {
    r.ServiceName = serviceName
}
/* param functionName: 函数名称。(Required) */
func (r *UpdateTriggerRequest) SetFunctionName(functionName string) {
    r.FunctionName = functionName
}
/* param triggerName: 触发器名称。(Required) */
func (r *UpdateTriggerRequest) SetTriggerName(triggerName string) {
    r.TriggerName = triggerName
}
/* param description: 修改后的描述(Optional) */
func (r *UpdateTriggerRequest) SetDescription(description string) {
    r.Description = &description
}
/* param triggerConfig: 修改后的配置(Optional) */
func (r *UpdateTriggerRequest) SetTriggerConfig(triggerConfig string) {
    r.TriggerConfig = &triggerConfig
}
/* param enable: 是否启用或禁用触发器，默认为不更改触发器状态(Optional) */
func (r *UpdateTriggerRequest) SetEnable(enable bool) {
    r.Enable = &enable
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateTriggerRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateTriggerResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateTriggerResult `json:"result"`
}

type UpdateTriggerResult struct {
}