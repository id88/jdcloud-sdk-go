// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    fc "github.com/jdcloud-api/jdcloud-sdk-go/services/fc/models"
)

type UpdateFunctionRequest struct {

    core.JDCloudRequest

    /* Region ID  */
    RegionId string `json:"regionId"`

    /* Service Name  */
    ServiceName string `json:"serviceName"`

    /* Function Name  */
    FunctionName string `json:"functionName"`

    /* 修改后的代码 (Optional) */
    Code *fc.Code `json:"code"`

    /* 修改后的超时时间 (Optional) */
    Timeout *int `json:"timeout"`

    /* 修改后的运行时语言 (Optional) */
    Runtime *string `json:"runtime"`

    /* 修改后的函数执行入口 (Optional) */
    Handler *string `json:"handler"`

    /* 修改后的描述 (Optional) */
    Description *string `json:"description"`

    /* 修改后的环境变量 (Optional) */
    Envs []fc.Environment `json:"envs"`

    /* 修改后的cpu (Optional) */
    Cpu *int `json:"cpu"`

    /* 修改后的内存 (Optional) */
    MemorySize *int `json:"memorySize"`

    /* 修改后的磁盘 (Optional) */
    DiskSize *int `json:"diskSize"`
}

/*
 * param regionId: Region ID (Required)
 * param serviceName: Service Name (Required)
 * param functionName: Function Name (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewUpdateFunctionRequest(
    regionId string,
    serviceName string,
    functionName string,
) *UpdateFunctionRequest {

	return &UpdateFunctionRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/services/{serviceName}/functions/{functionName}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        ServiceName: serviceName,
        FunctionName: functionName,
	}
}

/*
 * param regionId: Region ID (Required)
 * param serviceName: Service Name (Required)
 * param functionName: Function Name (Required)
 * param code: 修改后的代码 (Optional)
 * param timeout: 修改后的超时时间 (Optional)
 * param runtime: 修改后的运行时语言 (Optional)
 * param handler: 修改后的函数执行入口 (Optional)
 * param description: 修改后的描述 (Optional)
 * param envs: 修改后的环境变量 (Optional)
 * param cpu: 修改后的cpu (Optional)
 * param memorySize: 修改后的内存 (Optional)
 * param diskSize: 修改后的磁盘 (Optional)
 */
func NewUpdateFunctionRequestWithAllParams(
    regionId string,
    serviceName string,
    functionName string,
    code *fc.Code,
    timeout *int,
    runtime *string,
    handler *string,
    description *string,
    envs []fc.Environment,
    cpu *int,
    memorySize *int,
    diskSize *int,
) *UpdateFunctionRequest {

    return &UpdateFunctionRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/services/{serviceName}/functions/{functionName}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        ServiceName: serviceName,
        FunctionName: functionName,
        Code: code,
        Timeout: timeout,
        Runtime: runtime,
        Handler: handler,
        Description: description,
        Envs: envs,
        Cpu: cpu,
        MemorySize: memorySize,
        DiskSize: diskSize,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewUpdateFunctionRequestWithoutParam() *UpdateFunctionRequest {

    return &UpdateFunctionRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/services/{serviceName}/functions/{functionName}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: Region ID(Required) */
func (r *UpdateFunctionRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param serviceName: Service Name(Required) */
func (r *UpdateFunctionRequest) SetServiceName(serviceName string) {
    r.ServiceName = serviceName
}
/* param functionName: Function Name(Required) */
func (r *UpdateFunctionRequest) SetFunctionName(functionName string) {
    r.FunctionName = functionName
}
/* param code: 修改后的代码(Optional) */
func (r *UpdateFunctionRequest) SetCode(code *fc.Code) {
    r.Code = code
}
/* param timeout: 修改后的超时时间(Optional) */
func (r *UpdateFunctionRequest) SetTimeout(timeout int) {
    r.Timeout = &timeout
}
/* param runtime: 修改后的运行时语言(Optional) */
func (r *UpdateFunctionRequest) SetRuntime(runtime string) {
    r.Runtime = &runtime
}
/* param handler: 修改后的函数执行入口(Optional) */
func (r *UpdateFunctionRequest) SetHandler(handler string) {
    r.Handler = &handler
}
/* param description: 修改后的描述(Optional) */
func (r *UpdateFunctionRequest) SetDescription(description string) {
    r.Description = &description
}
/* param envs: 修改后的环境变量(Optional) */
func (r *UpdateFunctionRequest) SetEnvs(envs []fc.Environment) {
    r.Envs = envs
}
/* param cpu: 修改后的cpu(Optional) */
func (r *UpdateFunctionRequest) SetCpu(cpu int) {
    r.Cpu = &cpu
}
/* param memorySize: 修改后的内存(Optional) */
func (r *UpdateFunctionRequest) SetMemorySize(memorySize int) {
    r.MemorySize = &memorySize
}
/* param diskSize: 修改后的磁盘(Optional) */
func (r *UpdateFunctionRequest) SetDiskSize(diskSize int) {
    r.DiskSize = &diskSize
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r UpdateFunctionRequest) GetRegionId() string {
    return r.RegionId
}

type UpdateFunctionResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result UpdateFunctionResult `json:"result"`
}

type UpdateFunctionResult struct {
}