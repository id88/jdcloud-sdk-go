// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type DeleteForbiddenInfoCommonRequest struct {

    core.JDCloudRequest

    /* 封禁类型，domain:域名封禁,url:url封禁 (Optional) */
    ForbiddenType *string `json:"forbiddenType"`

    /* 封禁域名 (Optional) */
    ForbiddenDomain *string `json:"forbiddenDomain"`

    /* 封禁url,多个以;隔开。单url最大字符长度1024,以/开头，内容中不包含逗号.forbiddenType为url时需传入 (Optional) */
    ForbiddenUrl *string `json:"forbiddenUrl"`

    /* forbiddenType为url时有效。即当forbiddenDomain为域名组共享缓存主域名时，是否同步操作共享缓存从域名下的url,0:仅操作本域名,1:同步操作共享缓存域名,默认为0。 (Optional) */
    ShareCacheDomainFlag *string `json:"shareCacheDomainFlag"`

    /* forbiddenType为url时有效。用于封禁前缀识别的URL,应为单个特殊字符，如：~ (Optional) */
    Token *string `json:"token"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDeleteForbiddenInfoCommonRequest(
) *DeleteForbiddenInfoCommonRequest {

	return &DeleteForbiddenInfoCommonRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/forbiddenInfoCommon:delete",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param forbiddenType: 封禁类型，domain:域名封禁,url:url封禁 (Optional)
 * param forbiddenDomain: 封禁域名 (Optional)
 * param forbiddenUrl: 封禁url,多个以;隔开。单url最大字符长度1024,以/开头，内容中不包含逗号.forbiddenType为url时需传入 (Optional)
 * param shareCacheDomainFlag: forbiddenType为url时有效。即当forbiddenDomain为域名组共享缓存主域名时，是否同步操作共享缓存从域名下的url,0:仅操作本域名,1:同步操作共享缓存域名,默认为0。 (Optional)
 * param token: forbiddenType为url时有效。用于封禁前缀识别的URL,应为单个特殊字符，如：~ (Optional)
 */
func NewDeleteForbiddenInfoCommonRequestWithAllParams(
    forbiddenType *string,
    forbiddenDomain *string,
    forbiddenUrl *string,
    shareCacheDomainFlag *string,
    token *string,
) *DeleteForbiddenInfoCommonRequest {

    return &DeleteForbiddenInfoCommonRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/forbiddenInfoCommon:delete",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        ForbiddenType: forbiddenType,
        ForbiddenDomain: forbiddenDomain,
        ForbiddenUrl: forbiddenUrl,
        ShareCacheDomainFlag: shareCacheDomainFlag,
        Token: token,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDeleteForbiddenInfoCommonRequestWithoutParam() *DeleteForbiddenInfoCommonRequest {

    return &DeleteForbiddenInfoCommonRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/forbiddenInfoCommon:delete",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param forbiddenType: 封禁类型，domain:域名封禁,url:url封禁(Optional) */
func (r *DeleteForbiddenInfoCommonRequest) SetForbiddenType(forbiddenType string) {
    r.ForbiddenType = &forbiddenType
}
/* param forbiddenDomain: 封禁域名(Optional) */
func (r *DeleteForbiddenInfoCommonRequest) SetForbiddenDomain(forbiddenDomain string) {
    r.ForbiddenDomain = &forbiddenDomain
}
/* param forbiddenUrl: 封禁url,多个以;隔开。单url最大字符长度1024,以/开头，内容中不包含逗号.forbiddenType为url时需传入(Optional) */
func (r *DeleteForbiddenInfoCommonRequest) SetForbiddenUrl(forbiddenUrl string) {
    r.ForbiddenUrl = &forbiddenUrl
}
/* param shareCacheDomainFlag: forbiddenType为url时有效。即当forbiddenDomain为域名组共享缓存主域名时，是否同步操作共享缓存从域名下的url,0:仅操作本域名,1:同步操作共享缓存域名,默认为0。(Optional) */
func (r *DeleteForbiddenInfoCommonRequest) SetShareCacheDomainFlag(shareCacheDomainFlag string) {
    r.ShareCacheDomainFlag = &shareCacheDomainFlag
}
/* param token: forbiddenType为url时有效。用于封禁前缀识别的URL,应为单个特殊字符，如：~(Optional) */
func (r *DeleteForbiddenInfoCommonRequest) SetToken(token string) {
    r.Token = &token
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DeleteForbiddenInfoCommonRequest) GetRegionId() string {
    return ""
}

type DeleteForbiddenInfoCommonResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DeleteForbiddenInfoCommonResult `json:"result"`
}

type DeleteForbiddenInfoCommonResult struct {
    TaskId string `json:"taskId"`
}