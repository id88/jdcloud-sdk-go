// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type BatchIpBlackListRequest struct {

    core.JDCloudRequest

    /* 可选值。表示域名操作范围，可指定为all代表操作该账号下全量域名,全量域名个数应<=单次可批量操作的域名个数(默认50) (Optional) */
    OperateDomainRange *string `json:"operateDomainRange"`

    /* 可选值。待操作的域名列表,个数默认限制50个。注意operateDomainRange和domains至少指定一个参数。operateDomainRange为all时该参数不生效. (Optional) */
    Domains []string `json:"domains"`

    /* ip列表。最多50个 (Optional) */
    IpList []string `json:"ipList"`

    /* 封禁时长，单位分钟。默认1440 (Optional) */
    ForbidTime *int64 `json:"forbidTime"`

    /* forbid or resume.代表封禁和解封。 (Optional) */
    Action *string `json:"action"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewBatchIpBlackListRequest(
) *BatchIpBlackListRequest {

	return &BatchIpBlackListRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/batchIpBlackList",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param operateDomainRange: 可选值。表示域名操作范围，可指定为all代表操作该账号下全量域名,全量域名个数应<=单次可批量操作的域名个数(默认50) (Optional)
 * param domains: 可选值。待操作的域名列表,个数默认限制50个。注意operateDomainRange和domains至少指定一个参数。operateDomainRange为all时该参数不生效. (Optional)
 * param ipList: ip列表。最多50个 (Optional)
 * param forbidTime: 封禁时长，单位分钟。默认1440 (Optional)
 * param action: forbid or resume.代表封禁和解封。 (Optional)
 */
func NewBatchIpBlackListRequestWithAllParams(
    operateDomainRange *string,
    domains []string,
    ipList []string,
    forbidTime *int64,
    action *string,
) *BatchIpBlackListRequest {

    return &BatchIpBlackListRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/batchIpBlackList",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        OperateDomainRange: operateDomainRange,
        Domains: domains,
        IpList: ipList,
        ForbidTime: forbidTime,
        Action: action,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewBatchIpBlackListRequestWithoutParam() *BatchIpBlackListRequest {

    return &BatchIpBlackListRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/batchIpBlackList",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param operateDomainRange: 可选值。表示域名操作范围，可指定为all代表操作该账号下全量域名,全量域名个数应<=单次可批量操作的域名个数(默认50)(Optional) */
func (r *BatchIpBlackListRequest) SetOperateDomainRange(operateDomainRange string) {
    r.OperateDomainRange = &operateDomainRange
}
/* param domains: 可选值。待操作的域名列表,个数默认限制50个。注意operateDomainRange和domains至少指定一个参数。operateDomainRange为all时该参数不生效.(Optional) */
func (r *BatchIpBlackListRequest) SetDomains(domains []string) {
    r.Domains = domains
}
/* param ipList: ip列表。最多50个(Optional) */
func (r *BatchIpBlackListRequest) SetIpList(ipList []string) {
    r.IpList = ipList
}
/* param forbidTime: 封禁时长，单位分钟。默认1440(Optional) */
func (r *BatchIpBlackListRequest) SetForbidTime(forbidTime int64) {
    r.ForbidTime = &forbidTime
}
/* param action: forbid or resume.代表封禁和解封。(Optional) */
func (r *BatchIpBlackListRequest) SetAction(action string) {
    r.Action = &action
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r BatchIpBlackListRequest) GetRegionId() string {
    return ""
}

type BatchIpBlackListResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result BatchIpBlackListResult `json:"result"`
}

type BatchIpBlackListResult struct {
}