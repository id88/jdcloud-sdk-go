// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    cdn "github.com/jdcloud-api/jdcloud-sdk-go/services/cdn/models"
)

type QueryForbiddenInfoListCommonRequest struct {

    core.JDCloudRequest

    /* 封禁域名.queryDomain和taskId至少传入一个 (Optional) */
    QueryDomain *string `json:"queryDomain"`

    /* 任务id.queryDomain和taskId至少传入一个 (Optional) */
    TaskId *string `json:"taskId"`

    /* 封禁url,精确查询 (Optional) */
    ForbiddenUrl *string `json:"forbiddenUrl"`

    /* 页码数 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 每页size (Optional) */
    PageSize *int `json:"pageSize"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryForbiddenInfoListCommonRequest(
) *QueryForbiddenInfoListCommonRequest {

	return &QueryForbiddenInfoListCommonRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/forbiddenInfoCommon:query",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param queryDomain: 封禁域名.queryDomain和taskId至少传入一个 (Optional)
 * param taskId: 任务id.queryDomain和taskId至少传入一个 (Optional)
 * param forbiddenUrl: 封禁url,精确查询 (Optional)
 * param pageNumber: 页码数 (Optional)
 * param pageSize: 每页size (Optional)
 */
func NewQueryForbiddenInfoListCommonRequestWithAllParams(
    queryDomain *string,
    taskId *string,
    forbiddenUrl *string,
    pageNumber *int,
    pageSize *int,
) *QueryForbiddenInfoListCommonRequest {

    return &QueryForbiddenInfoListCommonRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/forbiddenInfoCommon:query",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        QueryDomain: queryDomain,
        TaskId: taskId,
        ForbiddenUrl: forbiddenUrl,
        PageNumber: pageNumber,
        PageSize: pageSize,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryForbiddenInfoListCommonRequestWithoutParam() *QueryForbiddenInfoListCommonRequest {

    return &QueryForbiddenInfoListCommonRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/forbiddenInfoCommon:query",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param queryDomain: 封禁域名.queryDomain和taskId至少传入一个(Optional) */
func (r *QueryForbiddenInfoListCommonRequest) SetQueryDomain(queryDomain string) {
    r.QueryDomain = &queryDomain
}
/* param taskId: 任务id.queryDomain和taskId至少传入一个(Optional) */
func (r *QueryForbiddenInfoListCommonRequest) SetTaskId(taskId string) {
    r.TaskId = &taskId
}
/* param forbiddenUrl: 封禁url,精确查询(Optional) */
func (r *QueryForbiddenInfoListCommonRequest) SetForbiddenUrl(forbiddenUrl string) {
    r.ForbiddenUrl = &forbiddenUrl
}
/* param pageNumber: 页码数(Optional) */
func (r *QueryForbiddenInfoListCommonRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 每页size(Optional) */
func (r *QueryForbiddenInfoListCommonRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryForbiddenInfoListCommonRequest) GetRegionId() string {
    return ""
}

type QueryForbiddenInfoListCommonResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryForbiddenInfoListCommonResult `json:"result"`
}

type QueryForbiddenInfoListCommonResult struct {
    Total int `json:"total"`
    List []cdn.ForbiddenInfoCommon `json:"list"`
}