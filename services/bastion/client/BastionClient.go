// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    bastion "github.com/jdcloud-api/jdcloud-sdk-go/services/bastion/apis"
    "encoding/json"
    "errors"
)

type BastionClient struct {
    core.JDCloudClient
}

func NewBastionClient(credential *core.Credential) *BastionClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("bastion.jdcloud-api.com")

    return &BastionClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "bastion",
            Revision:    "1.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *BastionClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *BastionClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *BastionClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 更新堡垒机实例的描述信息 */
func (c *BastionClient) UpdateBastionDesc(request *bastion.UpdateBastionDescRequest) (*bastion.UpdateBastionDescResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.UpdateBastionDescResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取加密sign */
func (c *BastionClient) DescribeSign(request *bastion.DescribeSignRequest) (*bastion.DescribeSignResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.DescribeSignResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 开关零信任功能 */
func (c *BastionClient) SetInstanceZeroEnable(request *bastion.SetInstanceZeroEnableRequest) (*bastion.SetInstanceZeroEnableResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.SetInstanceZeroEnableResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 获取堡垒机有效信息 */
func (c *BastionClient) DescribePins(request *bastion.DescribePinsRequest) (*bastion.DescribePinsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.DescribePinsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 设置公网IP状态，true为开放，false为关闭 */
func (c *BastionClient) SetInstancePublicAccess(request *bastion.SetInstancePublicAccessRequest) (*bastion.SetInstancePublicAccessResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.SetInstancePublicAccessResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量查询堡垒机的信息，此接口支持分页查询，默认每页20条 */
func (c *BastionClient) DescribeBastions(request *bastion.DescribeBastionsRequest) (*bastion.DescribeBastionsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.DescribeBastionsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 变更实例到期或者恢复实例服务
 */
func (c *BastionClient) ModifyInstanceExpireOrStart(request *bastion.ModifyInstanceExpireOrStartRequest) (*bastion.ModifyInstanceExpireOrStartResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.ModifyInstanceExpireOrStartResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询一个堡垒机的信息 */
func (c *BastionClient) DescribeSourceId(request *bastion.DescribeSourceIdRequest) (*bastion.DescribeSourceIdResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.DescribeSourceIdResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询一个堡垒机的信息 */
func (c *BastionClient) DescribeBastion(request *bastion.DescribeBastionRequest) (*bastion.DescribeBastionResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.DescribeBastionResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 变更实例的配置,目前只允许升配
 */
func (c *BastionClient) ModifyInstanceSpec(request *bastion.ModifyInstanceSpecRequest) (*bastion.ModifyInstanceSpecResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.ModifyInstanceSpecResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询一个堡垒机的信息 */
func (c *BastionClient) DescribeInstance(request *bastion.DescribeInstanceRequest) (*bastion.DescribeInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.DescribeInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 创建指定配置实例 */
func (c *BastionClient) CreateInstance(request *bastion.CreateInstanceRequest) (*bastion.CreateInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.CreateInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除实例 */
func (c *BastionClient) DeleteInstance(request *bastion.DeleteInstanceRequest) (*bastion.DeleteInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &bastion.DeleteInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

