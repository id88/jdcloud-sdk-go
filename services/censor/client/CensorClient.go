// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    censor "github.com/jdcloud-api/jdcloud-sdk-go/services/censor/apis"
    "encoding/json"
    "errors"
)

type CensorClient struct {
    core.JDCloudClient
}

func NewCensorClient(credential *core.Credential) *CensorClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("censor.jdcloud-api.com")

    return &CensorClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "censor",
            Revision:    "1.0.1",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *CensorClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *CensorClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *CensorClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 查看音频异步检测结果 */
func (c *CensorClient) AudioResults(request *censor.AudioResultsRequest) (*censor.AudioResultsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.AudioResultsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除限制参数配置 */
func (c *CensorClient) DeleteLimit(request *censor.DeleteLimitRequest) (*censor.DeleteLimitResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.DeleteLimitResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 文本同步检测-检测文本中是否包含违规信息 */
func (c *CensorClient) InnerTextScan(request *censor.InnerTextScanRequest) (*censor.InnerTextScanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.InnerTextScanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 提交音频异步检测任务 */
func (c *CensorClient) AsyncAudioScan(request *censor.AsyncAudioScanRequest) (*censor.AsyncAudioScanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.AsyncAudioScanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看视频异步检测结果 */
func (c *CensorClient) VideoResults(request *censor.VideoResultsRequest) (*censor.VideoResultsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.VideoResultsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查看图片异步检测结果 */
func (c *CensorClient) ImageResults(request *censor.ImageResultsRequest) (*censor.ImageResultsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.ImageResultsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除敏感库 */
func (c *CensorClient) DeleteCensorLib(request *censor.DeleteCensorLibRequest) (*censor.DeleteCensorLibResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.DeleteCensorLibResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 文本同步检测-检测文本中是否包含违规信息 */
func (c *CensorClient) TextScan(request *censor.TextScanRequest) (*censor.TextScanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.TextScanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 提交视频异步检测任务 */
func (c *CensorClient) AsyncVideoScan(request *censor.AsyncVideoScanRequest) (*censor.AsyncVideoScanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.AsyncVideoScanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除敏感库Item */
func (c *CensorClient) DeleteCensorLibItems(request *censor.DeleteCensorLibItemsRequest) (*censor.DeleteCensorLibItemsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.DeleteCensorLibItemsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 提交图片异步检测任务 */
func (c *CensorClient) AsyncImageScan(request *censor.AsyncImageScanRequest) (*censor.AsyncImageScanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.AsyncImageScanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 图片同步检测 */
func (c *CensorClient) ImageScan(request *censor.ImageScanRequest) (*censor.ImageScanResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &censor.ImageScanResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

