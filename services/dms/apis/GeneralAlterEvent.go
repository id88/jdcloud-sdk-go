// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    dms "github.com/jdcloud-api/jdcloud-sdk-go/services/dms/models"
)

type GeneralAlterEventRequest struct {

    core.JDCloudRequest

    /* 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)  */
    RegionId string `json:"regionId"`

    /* 数据源id。 (Optional) */
    DataSourceId *int `json:"dataSourceId"`

    /* 数据库名称。 (Optional) */
    DbName *string `json:"dbName"`

    /* 原始事件名称。 (Optional) */
    OriginEventName *string `json:"originEventName"`

    /* 新事件名称。 (Optional) */
    EventName *string `json:"eventName"`

    /* 注释。 (Optional) */
    EventComment *string `json:"eventComment"`

    /* 状态，ENABLED,DISABLED, SLAVESIDE_DISABLED。 (Optional) */
    EventStatus *string `json:"eventStatus"`

    /* 完成后是否保存。 (Optional) */
    IsPreserve *bool `json:"isPreserve"`

    /* 事件定义。 (Optional) */
    EventDefinition *string `json:"eventDefinition"`

    /* 调度方式，ONE_TIME,RECURRING。 (Optional) */
    EventType *string `json:"eventType"`

    /* 执行一次的时间。 (Optional) */
    ExecuteAt *string `json:"executeAt"`

    /* 循环执行时间隔时间的值。 (Optional) */
    IntervalValue *string `json:"intervalValue"`

    /* 循环执行时间隔时间的单位，YEAR,QUARTER,MONTH,WEEK,DAY,HOUR,MINUTE,SECOND,YEAR_MONTH,DAY_HOUR,DAY_MINUTE,DAY_SECOND,HOUR_MINUTE,HOUR_SECOND,MINUTE_SECOND。 (Optional) */
    IntervalField *string `json:"intervalField"`

    /* 循环执行开始时间。 (Optional) */
    Starts *string `json:"starts"`

    /* 循环执行结束时间。 (Optional) */
    Ends *string `json:"ends"`
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewGeneralAlterEventRequest(
    regionId string,
) *GeneralAlterEventRequest {

	return &GeneralAlterEventRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/event:generalAlter",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md) (Required)
 * param dataSourceId: 数据源id。 (Optional)
 * param dbName: 数据库名称。 (Optional)
 * param originEventName: 原始事件名称。 (Optional)
 * param eventName: 新事件名称。 (Optional)
 * param eventComment: 注释。 (Optional)
 * param eventStatus: 状态，ENABLED,DISABLED, SLAVESIDE_DISABLED。 (Optional)
 * param isPreserve: 完成后是否保存。 (Optional)
 * param eventDefinition: 事件定义。 (Optional)
 * param eventType: 调度方式，ONE_TIME,RECURRING。 (Optional)
 * param executeAt: 执行一次的时间。 (Optional)
 * param intervalValue: 循环执行时间隔时间的值。 (Optional)
 * param intervalField: 循环执行时间隔时间的单位，YEAR,QUARTER,MONTH,WEEK,DAY,HOUR,MINUTE,SECOND,YEAR_MONTH,DAY_HOUR,DAY_MINUTE,DAY_SECOND,HOUR_MINUTE,HOUR_SECOND,MINUTE_SECOND。 (Optional)
 * param starts: 循环执行开始时间。 (Optional)
 * param ends: 循环执行结束时间。 (Optional)
 */
func NewGeneralAlterEventRequestWithAllParams(
    regionId string,
    dataSourceId *int,
    dbName *string,
    originEventName *string,
    eventName *string,
    eventComment *string,
    eventStatus *string,
    isPreserve *bool,
    eventDefinition *string,
    eventType *string,
    executeAt *string,
    intervalValue *string,
    intervalField *string,
    starts *string,
    ends *string,
) *GeneralAlterEventRequest {

    return &GeneralAlterEventRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/event:generalAlter",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        DataSourceId: dataSourceId,
        DbName: dbName,
        OriginEventName: originEventName,
        EventName: eventName,
        EventComment: eventComment,
        EventStatus: eventStatus,
        IsPreserve: isPreserve,
        EventDefinition: eventDefinition,
        EventType: eventType,
        ExecuteAt: executeAt,
        IntervalValue: intervalValue,
        IntervalField: intervalField,
        Starts: starts,
        Ends: ends,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewGeneralAlterEventRequestWithoutParam() *GeneralAlterEventRequest {

    return &GeneralAlterEventRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/event:generalAlter",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域代码，取值范围参见[《各地域及可用区对照表》](../Enum-Definitions/Regions-AZ.md)(Required) */
func (r *GeneralAlterEventRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param dataSourceId: 数据源id。(Optional) */
func (r *GeneralAlterEventRequest) SetDataSourceId(dataSourceId int) {
    r.DataSourceId = &dataSourceId
}
/* param dbName: 数据库名称。(Optional) */
func (r *GeneralAlterEventRequest) SetDbName(dbName string) {
    r.DbName = &dbName
}
/* param originEventName: 原始事件名称。(Optional) */
func (r *GeneralAlterEventRequest) SetOriginEventName(originEventName string) {
    r.OriginEventName = &originEventName
}
/* param eventName: 新事件名称。(Optional) */
func (r *GeneralAlterEventRequest) SetEventName(eventName string) {
    r.EventName = &eventName
}
/* param eventComment: 注释。(Optional) */
func (r *GeneralAlterEventRequest) SetEventComment(eventComment string) {
    r.EventComment = &eventComment
}
/* param eventStatus: 状态，ENABLED,DISABLED, SLAVESIDE_DISABLED。(Optional) */
func (r *GeneralAlterEventRequest) SetEventStatus(eventStatus string) {
    r.EventStatus = &eventStatus
}
/* param isPreserve: 完成后是否保存。(Optional) */
func (r *GeneralAlterEventRequest) SetIsPreserve(isPreserve bool) {
    r.IsPreserve = &isPreserve
}
/* param eventDefinition: 事件定义。(Optional) */
func (r *GeneralAlterEventRequest) SetEventDefinition(eventDefinition string) {
    r.EventDefinition = &eventDefinition
}
/* param eventType: 调度方式，ONE_TIME,RECURRING。(Optional) */
func (r *GeneralAlterEventRequest) SetEventType(eventType string) {
    r.EventType = &eventType
}
/* param executeAt: 执行一次的时间。(Optional) */
func (r *GeneralAlterEventRequest) SetExecuteAt(executeAt string) {
    r.ExecuteAt = &executeAt
}
/* param intervalValue: 循环执行时间隔时间的值。(Optional) */
func (r *GeneralAlterEventRequest) SetIntervalValue(intervalValue string) {
    r.IntervalValue = &intervalValue
}
/* param intervalField: 循环执行时间隔时间的单位，YEAR,QUARTER,MONTH,WEEK,DAY,HOUR,MINUTE,SECOND,YEAR_MONTH,DAY_HOUR,DAY_MINUTE,DAY_SECOND,HOUR_MINUTE,HOUR_SECOND,MINUTE_SECOND。(Optional) */
func (r *GeneralAlterEventRequest) SetIntervalField(intervalField string) {
    r.IntervalField = &intervalField
}
/* param starts: 循环执行开始时间。(Optional) */
func (r *GeneralAlterEventRequest) SetStarts(starts string) {
    r.Starts = &starts
}
/* param ends: 循环执行结束时间。(Optional) */
func (r *GeneralAlterEventRequest) SetEnds(ends string) {
    r.Ends = &ends
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r GeneralAlterEventRequest) GetRegionId() string {
    return r.RegionId
}

type GeneralAlterEventResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result GeneralAlterEventResult `json:"result"`
}

type GeneralAlterEventResult struct {
    DmsSqls []dms.DmsSql `json:"dmsSqls"`
}