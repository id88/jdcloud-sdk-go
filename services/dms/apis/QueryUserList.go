// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    dms "github.com/jdcloud-api/jdcloud-sdk-go/services/dms/models"
)

type QueryUserListRequest struct {

    core.JDCloudRequest

    /* 查询的用户状态(启用(true),禁用(false)) (Optional) */
    ActiveStatus *bool `json:"activeStatus"`

    /* 查询的用户角色,枚举值(Admin("Admin","管理员"),DBA("DBA","DBA"),StructureReadOnly("StructureReadOnly","结构只读"),Normal("Normal","普通用户")) (Optional) */
    Role *string `json:"role"`

    /* 查询的用户登录开始时间(yyyy-MM-dd'T'HH:mm:ss.SSS'Z') (Optional) */
    LoginDateStart *string `json:"loginDateStart"`

    /* 查询的用户登录结束时间(yyyy-MM-dd'T'HH:mm:ss.SSS'Z') (Optional) */
    LoginDateEnd *string `json:"loginDateEnd"`

    /* 查询用户的用户名称 (Optional) */
    Username *string `json:"username"`

    /* 显示数据的页码，取值范围：[1,∞)。pageNumber为Null时，返回所有数据页码；超过总页数时，无数据。 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 每页显示的数据条数，用于查询列表的接口。 (Optional) */
    PageSize *int `json:"pageSize"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryUserListRequest(
) *QueryUserListRequest {

	return &QueryUserListRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/management:queryUserList",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param activeStatus: 查询的用户状态(启用(true),禁用(false)) (Optional)
 * param role: 查询的用户角色,枚举值(Admin("Admin","管理员"),DBA("DBA","DBA"),StructureReadOnly("StructureReadOnly","结构只读"),Normal("Normal","普通用户")) (Optional)
 * param loginDateStart: 查询的用户登录开始时间(yyyy-MM-dd'T'HH:mm:ss.SSS'Z') (Optional)
 * param loginDateEnd: 查询的用户登录结束时间(yyyy-MM-dd'T'HH:mm:ss.SSS'Z') (Optional)
 * param username: 查询用户的用户名称 (Optional)
 * param pageNumber: 显示数据的页码，取值范围：[1,∞)。pageNumber为Null时，返回所有数据页码；超过总页数时，无数据。 (Optional)
 * param pageSize: 每页显示的数据条数，用于查询列表的接口。 (Optional)
 */
func NewQueryUserListRequestWithAllParams(
    activeStatus *bool,
    role *string,
    loginDateStart *string,
    loginDateEnd *string,
    username *string,
    pageNumber *int,
    pageSize *int,
) *QueryUserListRequest {

    return &QueryUserListRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/management:queryUserList",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        ActiveStatus: activeStatus,
        Role: role,
        LoginDateStart: loginDateStart,
        LoginDateEnd: loginDateEnd,
        Username: username,
        PageNumber: pageNumber,
        PageSize: pageSize,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryUserListRequestWithoutParam() *QueryUserListRequest {

    return &QueryUserListRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/management:queryUserList",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param activeStatus: 查询的用户状态(启用(true),禁用(false))(Optional) */
func (r *QueryUserListRequest) SetActiveStatus(activeStatus bool) {
    r.ActiveStatus = &activeStatus
}
/* param role: 查询的用户角色,枚举值(Admin("Admin","管理员"),DBA("DBA","DBA"),StructureReadOnly("StructureReadOnly","结构只读"),Normal("Normal","普通用户"))(Optional) */
func (r *QueryUserListRequest) SetRole(role string) {
    r.Role = &role
}
/* param loginDateStart: 查询的用户登录开始时间(yyyy-MM-dd'T'HH:mm:ss.SSS'Z')(Optional) */
func (r *QueryUserListRequest) SetLoginDateStart(loginDateStart string) {
    r.LoginDateStart = &loginDateStart
}
/* param loginDateEnd: 查询的用户登录结束时间(yyyy-MM-dd'T'HH:mm:ss.SSS'Z')(Optional) */
func (r *QueryUserListRequest) SetLoginDateEnd(loginDateEnd string) {
    r.LoginDateEnd = &loginDateEnd
}
/* param username: 查询用户的用户名称(Optional) */
func (r *QueryUserListRequest) SetUsername(username string) {
    r.Username = &username
}
/* param pageNumber: 显示数据的页码，取值范围：[1,∞)。pageNumber为Null时，返回所有数据页码；超过总页数时，无数据。(Optional) */
func (r *QueryUserListRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 每页显示的数据条数，用于查询列表的接口。(Optional) */
func (r *QueryUserListRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryUserListRequest) GetRegionId() string {
    return ""
}

type QueryUserListResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryUserListResult `json:"result"`
}

type QueryUserListResult struct {
    Count int `json:"count"`
    DmsUserVOList []dms.DmsUserVO `json:"dmsUserVOList"`
}