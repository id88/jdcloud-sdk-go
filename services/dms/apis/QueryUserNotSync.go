// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    dms "github.com/jdcloud-api/jdcloud-sdk-go/services/dms/models"
)

type QueryUserNotSyncRequest struct {

    core.JDCloudRequest

    /* 第几页,不传的话会将当前所有的未同步的账号都同步过来 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 页大小。 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 关键字。 (Optional) */
    Keyword *string `json:"keyword"`

    /* 排序规则：0-创建时间顺序排序，1-创建时间倒序排序。 (Optional) */
    Sort *int `json:"sort"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewQueryUserNotSyncRequest(
) *QueryUserNotSyncRequest {

	return &QueryUserNotSyncRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/management:queryUserNotSync",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param pageNumber: 第几页,不传的话会将当前所有的未同步的账号都同步过来 (Optional)
 * param pageSize: 页大小。 (Optional)
 * param keyword: 关键字。 (Optional)
 * param sort: 排序规则：0-创建时间顺序排序，1-创建时间倒序排序。 (Optional)
 */
func NewQueryUserNotSyncRequestWithAllParams(
    pageNumber *int,
    pageSize *int,
    keyword *string,
    sort *int,
) *QueryUserNotSyncRequest {

    return &QueryUserNotSyncRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/management:queryUserNotSync",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        PageNumber: pageNumber,
        PageSize: pageSize,
        Keyword: keyword,
        Sort: sort,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewQueryUserNotSyncRequestWithoutParam() *QueryUserNotSyncRequest {

    return &QueryUserNotSyncRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/management:queryUserNotSync",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param pageNumber: 第几页,不传的话会将当前所有的未同步的账号都同步过来(Optional) */
func (r *QueryUserNotSyncRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 页大小。(Optional) */
func (r *QueryUserNotSyncRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param keyword: 关键字。(Optional) */
func (r *QueryUserNotSyncRequest) SetKeyword(keyword string) {
    r.Keyword = &keyword
}
/* param sort: 排序规则：0-创建时间顺序排序，1-创建时间倒序排序。(Optional) */
func (r *QueryUserNotSyncRequest) SetSort(sort int) {
    r.Sort = &sort
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r QueryUserNotSyncRequest) GetRegionId() string {
    return ""
}

type QueryUserNotSyncResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result QueryUserNotSyncResult `json:"result"`
}

type QueryUserNotSyncResult struct {
    Total int `json:"total"`
    SubUserList []dms.DmsSubUserVO `json:"subUserList"`
}