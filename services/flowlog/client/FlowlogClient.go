// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    flowlog "github.com/jdcloud-api/jdcloud-sdk-go/services/flowlog/apis"
    "encoding/json"
    "errors"
)

type FlowlogClient struct {
    core.JDCloudClient
}

func NewFlowlogClient(credential *core.Credential) *FlowlogClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("flowlog.jdcloud-api.com")

    return &FlowlogClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "flowlog",
            Revision:    "1.1.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *FlowlogClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *FlowlogClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *FlowlogClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 本接口用于查询流日志资源详情 */
func (c *FlowlogClient) DescribeFlowLog(request *flowlog.DescribeFlowLogRequest) (*flowlog.DescribeFlowLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.DescribeFlowLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于启动采集流日志 */
func (c *FlowlogClient) StartFlowLog(request *flowlog.StartFlowLogRequest) (*flowlog.StartFlowLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.StartFlowLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于停止采集流日志 */
func (c *FlowlogClient) StopFlowLog(request *flowlog.StopFlowLogRequest) (*flowlog.StopFlowLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.StopFlowLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于移除流日志的采集资源 */
func (c *FlowlogClient) RemoveCollectResources(request *flowlog.RemoveCollectResourcesRequest) (*flowlog.RemoveCollectResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.RemoveCollectResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于创建流日志资源 */
func (c *FlowlogClient) CreateFlowLog(request *flowlog.CreateFlowLogRequest) (*flowlog.CreateFlowLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.CreateFlowLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于修改流日志资源，包括流日志的名称、描述、采集时间间隔 */
func (c *FlowlogClient) ModifyFlowLog(request *flowlog.ModifyFlowLogRequest) (*flowlog.ModifyFlowLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.ModifyFlowLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于删除流日志，删除前请先停止流日志（stopFlowlog） */
func (c *FlowlogClient) DeleteFlowLog(request *flowlog.DeleteFlowLogRequest) (*flowlog.DeleteFlowLogResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.DeleteFlowLogResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于查询流日志资源列表 */
func (c *FlowlogClient) DescribeFlowLogs(request *flowlog.DescribeFlowLogsRequest) (*flowlog.DescribeFlowLogsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.DescribeFlowLogsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于添加需要采集流日志的资源 */
func (c *FlowlogClient) AddCollectResources(request *flowlog.AddCollectResourcesRequest) (*flowlog.AddCollectResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.AddCollectResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询配额信息 */
func (c *FlowlogClient) DescribeQuota(request *flowlog.DescribeQuotaRequest) (*flowlog.DescribeQuotaResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.DescribeQuotaResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 本接口用于查询流日志采集的资源列表 */
func (c *FlowlogClient) DescribeCollectResources(request *flowlog.DescribeCollectResourcesRequest) (*flowlog.DescribeCollectResourcesResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &flowlog.DescribeCollectResourcesResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

