// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type ModifyFlowLogRequest struct {

    core.JDCloudRequest

    /* 地域 ID  */
    RegionId string `json:"regionId"`

    /* 流日志ID  */
    FlowLogId string `json:"flowLogId"`

    /* 流日志名称，只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符 (Optional) */
    FlowLogName *string `json:"flowLogName"`

    /* 描述,允许输入UTF-8编码下的全部字符，不超过256字符 (Optional) */
    Description *string `json:"description"`

    /* 流日志采集时间间隔。单位：分钟。取值：1、5、10 (Optional) */
    CollectInterval *int `json:"collectInterval"`
}

/*
 * param regionId: 地域 ID (Required)
 * param flowLogId: 流日志ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewModifyFlowLogRequest(
    regionId string,
    flowLogId string,
) *ModifyFlowLogRequest {

	return &ModifyFlowLogRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/flowLogs/{flowLogId}",
			Method:  "PATCH",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        FlowLogId: flowLogId,
	}
}

/*
 * param regionId: 地域 ID (Required)
 * param flowLogId: 流日志ID (Required)
 * param flowLogName: 流日志名称，只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符 (Optional)
 * param description: 描述,允许输入UTF-8编码下的全部字符，不超过256字符 (Optional)
 * param collectInterval: 流日志采集时间间隔。单位：分钟。取值：1、5、10 (Optional)
 */
func NewModifyFlowLogRequestWithAllParams(
    regionId string,
    flowLogId string,
    flowLogName *string,
    description *string,
    collectInterval *int,
) *ModifyFlowLogRequest {

    return &ModifyFlowLogRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/flowLogs/{flowLogId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        FlowLogId: flowLogId,
        FlowLogName: flowLogName,
        Description: description,
        CollectInterval: collectInterval,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewModifyFlowLogRequestWithoutParam() *ModifyFlowLogRequest {

    return &ModifyFlowLogRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/flowLogs/{flowLogId}",
            Method:  "PATCH",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域 ID(Required) */
func (r *ModifyFlowLogRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param flowLogId: 流日志ID(Required) */
func (r *ModifyFlowLogRequest) SetFlowLogId(flowLogId string) {
    r.FlowLogId = flowLogId
}
/* param flowLogName: 流日志名称，只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符(Optional) */
func (r *ModifyFlowLogRequest) SetFlowLogName(flowLogName string) {
    r.FlowLogName = &flowLogName
}
/* param description: 描述,允许输入UTF-8编码下的全部字符，不超过256字符(Optional) */
func (r *ModifyFlowLogRequest) SetDescription(description string) {
    r.Description = &description
}
/* param collectInterval: 流日志采集时间间隔。单位：分钟。取值：1、5、10(Optional) */
func (r *ModifyFlowLogRequest) SetCollectInterval(collectInterval int) {
    r.CollectInterval = &collectInterval
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ModifyFlowLogRequest) GetRegionId() string {
    return r.RegionId
}

type ModifyFlowLogResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ModifyFlowLogResult `json:"result"`
}

type ModifyFlowLogResult struct {
}