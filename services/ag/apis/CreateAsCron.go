// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CreateAsCronRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 高可用组ID  */
    AgId string `json:"agId"`

    /* 名称，长度为1~32个字符，只允许中文、数字、大小写字母、英文下划线（_）、连字符（-）  */
    Name string `json:"name"`

    /* 描述，最大长度为256个字符 (Optional) */
    Description *string `json:"description"`

    /* 可以为定时任务绑定伸缩规则，目前只支持简单规则，即 `asRuleType` 为 `Simple` 的伸缩规则
- 当指定参数`asRuleId`时，不允许指定参数`minSize`,`maxSize`,`desiredCapacity`
 (Optional) */
    AsRuleId *string `json:"asRuleId"`

    /* 设置伸缩组最小实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
 (Optional) */
    MinSize *int `json:"minSize"`

    /* 设置伸缩组最大实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
 (Optional) */
    MaxSize *int `json:"maxSize"`

    /* 设置伸缩组期望实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
 (Optional) */
    DesiredCapacity *int `json:"desiredCapacity"`

    /* 定时任务触发的时间点
时间格式：`2023-05-10 10:10:00`，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
- 如果未指定`repeatType`，则按指定的日期和时间执行一次
- 如果指定了`repeatType`，则此属性指定的时间点，表示从这个时间之后开始按照重复周期执行定时任务
时间限制如下：
- 时间必须大于当前时间
- 不能填写当前时间起30日后的时间
- 时间必须小于`repeatEndTime`
  */
    LaunchTime string `json:"launchTime"`

    /* 重复执行定时任务的类型，如果指定了`repeatType`，则`repeatValue`必填
取值范围：[`Daily`,`Weekly`,`Monthly`,`Cron`]
- Daily：每多少天重复执行一次定时任务
- Weekly：每周指定几天重复执行一次定时任务
- Monthly：每月内指定几天重复执行一次定时任务
- Cron：按照指定的Cron表达式执行定时任务
 (Optional) */
    RepeatType *string `json:"repeatType"`

    /* 重复执行定时任务的数值，如果指定了`repeatType`，则`repeatValue`必填
- `repeatType`取值为`Daily`时，只能填一个值，取值范围：[ `1` ~ `31` ]，表示：每几天执行
- `repeatType`取值为`Weekly`时，可以填入多个值，填多个值时使用半角逗号（,）分隔。取值范围：[`0`,`1`,`2`,`3`,`4`,`5`,`6`]，分别对应：周日、周一、周二、周三、周四、周五、周六，表示：每周几执行
- `repeatType`取值为`Monthly`时，格式为A-B。A、B的取值范围：[ `1` ~ `31` ]，并且B必须大于等于A，表示：每个月的几号到几号执行
- `repeatType`取值为`Cron`时，必须填写Cron表达式，不支持秒，最小单位为分钟

支持的Cron格式如下：
*    *    *    *    *   从左到右依次表示：`[分] [小时] [日] [月] [周]`

- 分，取值范围：[`0` ~ `59`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 小时，取值范围：[`0` ~ `23`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 日，取值范围：[`1` ~ `31`]，允许的连接符号取值范围：[`*` `/` `,` `-` `?`]
- 月，取值范围：[`1` ~ `12`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 周，取值范围：[`0` ~ `6`]，允许的连接符号取值范围：[`*` `/` `,` `-` `?`]

符号解析：`*`表示任意值，`/`表示步长，`,`表示多个值，`-`表示范围，`?`表示不指定值

示例：0 10 * * *  表示：每天10点执行
 (Optional) */
    RepeatValue *string `json:"repeatValue"`

    /* 重复执行定时任务的结束时间
默认为空，表示不限制结束时间，一直重复执行
时间格式：`2023-05-10 10:10:00`，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
时间限制如下：
- 时间必须大于`launchTime`
 (Optional) */
    RepeatEndTime *string `json:"repeatEndTime"`

    /* 定时任务触发操作失败后，在此时间内重试，单位为秒，默认为600，取值范围：[`0` ~ `1800`] (Optional) */
    LaunchExpirationTime *int `json:"launchExpirationTime"`
}

/*
 * param regionId: 地域ID (Required)
 * param agId: 高可用组ID (Required)
 * param name: 名称，长度为1~32个字符，只允许中文、数字、大小写字母、英文下划线（_）、连字符（-） (Required)
 * param launchTime: 定时任务触发的时间点
时间格式：`2023-05-10 10:10:00`，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
- 如果未指定`repeatType`，则按指定的日期和时间执行一次
- 如果指定了`repeatType`，则此属性指定的时间点，表示从这个时间之后开始按照重复周期执行定时任务
时间限制如下：
- 时间必须大于当前时间
- 不能填写当前时间起30日后的时间
- 时间必须小于`repeatEndTime`
 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateAsCronRequest(
    regionId string,
    agId string,
    name string,
    launchTime string,
) *CreateAsCronRequest {

	return &CreateAsCronRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/asCrons",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
        AgId: agId,
        Name: name,
        LaunchTime: launchTime,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param agId: 高可用组ID (Required)
 * param name: 名称，长度为1~32个字符，只允许中文、数字、大小写字母、英文下划线（_）、连字符（-） (Required)
 * param description: 描述，最大长度为256个字符 (Optional)
 * param asRuleId: 可以为定时任务绑定伸缩规则，目前只支持简单规则，即 `asRuleType` 为 `Simple` 的伸缩规则
- 当指定参数`asRuleId`时，不允许指定参数`minSize`,`maxSize`,`desiredCapacity`
 (Optional)
 * param minSize: 设置伸缩组最小实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
 (Optional)
 * param maxSize: 设置伸缩组最大实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
 (Optional)
 * param desiredCapacity: 设置伸缩组期望实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
 (Optional)
 * param launchTime: 定时任务触发的时间点
时间格式：`2023-05-10 10:10:00`，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
- 如果未指定`repeatType`，则按指定的日期和时间执行一次
- 如果指定了`repeatType`，则此属性指定的时间点，表示从这个时间之后开始按照重复周期执行定时任务
时间限制如下：
- 时间必须大于当前时间
- 不能填写当前时间起30日后的时间
- 时间必须小于`repeatEndTime`
 (Required)
 * param repeatType: 重复执行定时任务的类型，如果指定了`repeatType`，则`repeatValue`必填
取值范围：[`Daily`,`Weekly`,`Monthly`,`Cron`]
- Daily：每多少天重复执行一次定时任务
- Weekly：每周指定几天重复执行一次定时任务
- Monthly：每月内指定几天重复执行一次定时任务
- Cron：按照指定的Cron表达式执行定时任务
 (Optional)
 * param repeatValue: 重复执行定时任务的数值，如果指定了`repeatType`，则`repeatValue`必填
- `repeatType`取值为`Daily`时，只能填一个值，取值范围：[ `1` ~ `31` ]，表示：每几天执行
- `repeatType`取值为`Weekly`时，可以填入多个值，填多个值时使用半角逗号（,）分隔。取值范围：[`0`,`1`,`2`,`3`,`4`,`5`,`6`]，分别对应：周日、周一、周二、周三、周四、周五、周六，表示：每周几执行
- `repeatType`取值为`Monthly`时，格式为A-B。A、B的取值范围：[ `1` ~ `31` ]，并且B必须大于等于A，表示：每个月的几号到几号执行
- `repeatType`取值为`Cron`时，必须填写Cron表达式，不支持秒，最小单位为分钟

支持的Cron格式如下：
*    *    *    *    *   从左到右依次表示：`[分] [小时] [日] [月] [周]`

- 分，取值范围：[`0` ~ `59`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 小时，取值范围：[`0` ~ `23`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 日，取值范围：[`1` ~ `31`]，允许的连接符号取值范围：[`*` `/` `,` `-` `?`]
- 月，取值范围：[`1` ~ `12`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 周，取值范围：[`0` ~ `6`]，允许的连接符号取值范围：[`*` `/` `,` `-` `?`]

符号解析：`*`表示任意值，`/`表示步长，`,`表示多个值，`-`表示范围，`?`表示不指定值

示例：0 10 * * *  表示：每天10点执行
 (Optional)
 * param repeatEndTime: 重复执行定时任务的结束时间
默认为空，表示不限制结束时间，一直重复执行
时间格式：`2023-05-10 10:10:00`，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
时间限制如下：
- 时间必须大于`launchTime`
 (Optional)
 * param launchExpirationTime: 定时任务触发操作失败后，在此时间内重试，单位为秒，默认为600，取值范围：[`0` ~ `1800`] (Optional)
 */
func NewCreateAsCronRequestWithAllParams(
    regionId string,
    agId string,
    name string,
    description *string,
    asRuleId *string,
    minSize *int,
    maxSize *int,
    desiredCapacity *int,
    launchTime string,
    repeatType *string,
    repeatValue *string,
    repeatEndTime *string,
    launchExpirationTime *int,
) *CreateAsCronRequest {

    return &CreateAsCronRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/asCrons",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        AgId: agId,
        Name: name,
        Description: description,
        AsRuleId: asRuleId,
        MinSize: minSize,
        MaxSize: maxSize,
        DesiredCapacity: desiredCapacity,
        LaunchTime: launchTime,
        RepeatType: repeatType,
        RepeatValue: repeatValue,
        RepeatEndTime: repeatEndTime,
        LaunchExpirationTime: launchExpirationTime,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateAsCronRequestWithoutParam() *CreateAsCronRequest {

    return &CreateAsCronRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/asCrons",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *CreateAsCronRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param agId: 高可用组ID(Required) */
func (r *CreateAsCronRequest) SetAgId(agId string) {
    r.AgId = agId
}
/* param name: 名称，长度为1~32个字符，只允许中文、数字、大小写字母、英文下划线（_）、连字符（-）(Required) */
func (r *CreateAsCronRequest) SetName(name string) {
    r.Name = name
}
/* param description: 描述，最大长度为256个字符(Optional) */
func (r *CreateAsCronRequest) SetDescription(description string) {
    r.Description = &description
}
/* param asRuleId: 可以为定时任务绑定伸缩规则，目前只支持简单规则，即 `asRuleType` 为 `Simple` 的伸缩规则
- 当指定参数`asRuleId`时，不允许指定参数`minSize`,`maxSize`,`desiredCapacity`
(Optional) */
func (r *CreateAsCronRequest) SetAsRuleId(asRuleId string) {
    r.AsRuleId = &asRuleId
}
/* param minSize: 设置伸缩组最小实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
(Optional) */
func (r *CreateAsCronRequest) SetMinSize(minSize int) {
    r.MinSize = &minSize
}
/* param maxSize: 设置伸缩组最大实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
(Optional) */
func (r *CreateAsCronRequest) SetMaxSize(maxSize int) {
    r.MaxSize = &maxSize
}
/* param desiredCapacity: 设置伸缩组期望实例数，必须大于等于0，如果没有设置此参数，则此参数将会保存为 -1
- 如果没有指定参数`asRuleId`，则参数`minSize`,`maxSize`,`desiredCapacity`三者至少填写一个
(Optional) */
func (r *CreateAsCronRequest) SetDesiredCapacity(desiredCapacity int) {
    r.DesiredCapacity = &desiredCapacity
}
/* param launchTime: 定时任务触发的时间点
时间格式：`2023-05-10 10:10:00`，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
- 如果未指定`repeatType`，则按指定的日期和时间执行一次
- 如果指定了`repeatType`，则此属性指定的时间点，表示从这个时间之后开始按照重复周期执行定时任务
时间限制如下：
- 时间必须大于当前时间
- 不能填写当前时间起30日后的时间
- 时间必须小于`repeatEndTime`
(Required) */
func (r *CreateAsCronRequest) SetLaunchTime(launchTime string) {
    r.LaunchTime = launchTime
}
/* param repeatType: 重复执行定时任务的类型，如果指定了`repeatType`，则`repeatValue`必填
取值范围：[`Daily`,`Weekly`,`Monthly`,`Cron`]
- Daily：每多少天重复执行一次定时任务
- Weekly：每周指定几天重复执行一次定时任务
- Monthly：每月内指定几天重复执行一次定时任务
- Cron：按照指定的Cron表达式执行定时任务
(Optional) */
func (r *CreateAsCronRequest) SetRepeatType(repeatType string) {
    r.RepeatType = &repeatType
}
/* param repeatValue: 重复执行定时任务的数值，如果指定了`repeatType`，则`repeatValue`必填
- `repeatType`取值为`Daily`时，只能填一个值，取值范围：[ `1` ~ `31` ]，表示：每几天执行
- `repeatType`取值为`Weekly`时，可以填入多个值，填多个值时使用半角逗号（,）分隔。取值范围：[`0`,`1`,`2`,`3`,`4`,`5`,`6`]，分别对应：周日、周一、周二、周三、周四、周五、周六，表示：每周几执行
- `repeatType`取值为`Monthly`时，格式为A-B。A、B的取值范围：[ `1` ~ `31` ]，并且B必须大于等于A，表示：每个月的几号到几号执行
- `repeatType`取值为`Cron`时，必须填写Cron表达式，不支持秒，最小单位为分钟

支持的Cron格式如下：
*    *    *    *    *   从左到右依次表示：`[分] [小时] [日] [月] [周]`

- 分，取值范围：[`0` ~ `59`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 小时，取值范围：[`0` ~ `23`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 日，取值范围：[`1` ~ `31`]，允许的连接符号取值范围：[`*` `/` `,` `-` `?`]
- 月，取值范围：[`1` ~ `12`]，允许的连接符号取值范围：[`*` `/` `,` `-`]
- 周，取值范围：[`0` ~ `6`]，允许的连接符号取值范围：[`*` `/` `,` `-` `?`]

符号解析：`*`表示任意值，`/`表示步长，`,`表示多个值，`-`表示范围，`?`表示不指定值

示例：0 10 * * *  表示：每天10点执行
(Optional) */
func (r *CreateAsCronRequest) SetRepeatValue(repeatValue string) {
    r.RepeatValue = &repeatValue
}
/* param repeatEndTime: 重复执行定时任务的结束时间
默认为空，表示不限制结束时间，一直重复执行
时间格式：`2023-05-10 10:10:00`，目前只支持到分钟，秒数会被忽略，但是需要严格按照此时间格式填写
时间限制如下：
- 时间必须大于`launchTime`
(Optional) */
func (r *CreateAsCronRequest) SetRepeatEndTime(repeatEndTime string) {
    r.RepeatEndTime = &repeatEndTime
}
/* param launchExpirationTime: 定时任务触发操作失败后，在此时间内重试，单位为秒，默认为600，取值范围：[`0` ~ `1800`](Optional) */
func (r *CreateAsCronRequest) SetLaunchExpirationTime(launchExpirationTime int) {
    r.LaunchExpirationTime = &launchExpirationTime
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateAsCronRequest) GetRegionId() string {
    return r.RegionId
}

type CreateAsCronResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateAsCronResult `json:"result"`
}

type CreateAsCronResult struct {
    AsCronId string `json:"asCronId"`
}