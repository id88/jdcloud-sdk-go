// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    ag "github.com/jdcloud-api/jdcloud-sdk-go/services/ag/models"
)

type DescribeAsCronsRequest struct {

    core.JDCloudRequest

    /* 地域ID  */
    RegionId string `json:"regionId"`

    /* 页码，默认为`1`，最小值必须大于0 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小，默认为`20`，取值范围[`10` ~ `100`] (Optional) */
    PageSize *int `json:"pageSize"`

    /* 支持使用以下关键字进行过滤查询
- `agId`: 高可用组ID，精确匹配，支持多个
- `asCronId`: 定时任务ID，精确匹配，支持多个
- `name`: 定时任务名称，模糊匹配，支持单个
 (Optional) */
    Filters []ag.Filter `json:"filters"`

    /* 排序条件列表，目前只支持单个排序条件，不支持多个排序条件，默认按照 `createTime` 降序排序
支持使用以下关键字进行排序
- `createTime`: 创建时间
 (Optional) */
    Sorts []ag.Sort `json:"sorts"`
}

/*
 * param regionId: 地域ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeAsCronsRequest(
    regionId string,
) *DescribeAsCronsRequest {

	return &DescribeAsCronsRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/asCrons",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        RegionId: regionId,
	}
}

/*
 * param regionId: 地域ID (Required)
 * param pageNumber: 页码，默认为`1`，最小值必须大于0 (Optional)
 * param pageSize: 分页大小，默认为`20`，取值范围[`10` ~ `100`] (Optional)
 * param filters: 支持使用以下关键字进行过滤查询
- `agId`: 高可用组ID，精确匹配，支持多个
- `asCronId`: 定时任务ID，精确匹配，支持多个
- `name`: 定时任务名称，模糊匹配，支持单个
 (Optional)
 * param sorts: 排序条件列表，目前只支持单个排序条件，不支持多个排序条件，默认按照 `createTime` 降序排序
支持使用以下关键字进行排序
- `createTime`: 创建时间
 (Optional)
 */
func NewDescribeAsCronsRequestWithAllParams(
    regionId string,
    pageNumber *int,
    pageSize *int,
    filters []ag.Filter,
    sorts []ag.Sort,
) *DescribeAsCronsRequest {

    return &DescribeAsCronsRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/asCrons",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        RegionId: regionId,
        PageNumber: pageNumber,
        PageSize: pageSize,
        Filters: filters,
        Sorts: sorts,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeAsCronsRequestWithoutParam() *DescribeAsCronsRequest {

    return &DescribeAsCronsRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/asCrons",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param regionId: 地域ID(Required) */
func (r *DescribeAsCronsRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}
/* param pageNumber: 页码，默认为`1`，最小值必须大于0(Optional) */
func (r *DescribeAsCronsRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}
/* param pageSize: 分页大小，默认为`20`，取值范围[`10` ~ `100`](Optional) */
func (r *DescribeAsCronsRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}
/* param filters: 支持使用以下关键字进行过滤查询
- `agId`: 高可用组ID，精确匹配，支持多个
- `asCronId`: 定时任务ID，精确匹配，支持多个
- `name`: 定时任务名称，模糊匹配，支持单个
(Optional) */
func (r *DescribeAsCronsRequest) SetFilters(filters []ag.Filter) {
    r.Filters = filters
}
/* param sorts: 排序条件列表，目前只支持单个排序条件，不支持多个排序条件，默认按照 `createTime` 降序排序
支持使用以下关键字进行排序
- `createTime`: 创建时间
(Optional) */
func (r *DescribeAsCronsRequest) SetSorts(sorts []ag.Sort) {
    r.Sorts = sorts
}


// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeAsCronsRequest) GetRegionId() string {
    return r.RegionId
}

type DescribeAsCronsResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeAsCronsResult `json:"result"`
}

type DescribeAsCronsResult struct {
    TotalCount int `json:"totalCount"`
    AsCrons []ag.AsCronInfo `json:"asCrons"`
}